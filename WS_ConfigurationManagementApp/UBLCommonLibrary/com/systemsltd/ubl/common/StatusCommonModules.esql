

BROKER SCHEMA com.systemsltd.ubl.common
PATH com.systemsltd.common, com.systemsltd.ubl.common.config, com.systemsltd.common.logging;

DECLARE TransactionType, TransactionSubType EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE TransactionStatus
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE singleResult,detailResult ROW;

		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;

		SET OutputRoot.Properties = InputProperties;
		SET outRef.serviceHeader = inputRef.serviceHeader;
		SET outRef.transactionInfo = inputRef.transactionInfo;

		CALL PopulateSuccessResponseHeader(outRef, 'SUCCESS');

		DECLARE singleQuerry CHARACTER 'SELECT COALESCE(TD.TRANSACTION_STATUS, TG.TRANSACTION_STATUS) AS  TRANSACTION_STATUS
		FROM TRANSACTION_INFO TI
		LEFT JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_INFO_ID = TI.ID
		LEFT JOIN TRANSACTION_GROUP TG ON TG.TRANSACTION_INFO_ID = TI.ID
		WHERE TI.REFERENCE_ID = ? AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ?';

		SET singleResult.data[] = PASSTHRU(singleQuerry VALUES(inputRef.transactionDetail.referenceId, TransactionType, inputRef.serviceHeader.channel));

		IF EXISTS(singleResult.data[]) THEN

			SET outRef.processingStatus = singleResult.data[1].TRANSACTION_STATUS;

			IF(inputRef.detailRequired = 'TRUE') THEN

			DECLARE detailQuerry CHARACTER 'SELECT TI2.TRANSACTION_TYPE, TI2.TRANSACTION_SUBTYPE, TI2.REFERENCE_ID, TD.TRANSACTION_STATUS,
			TG.TRANSACTION_COUNT, TG.SUCCESS_COUNT
			FROM TRANSACTION_INFO TI
			INNER JOIN TRANSACTION_GROUP TG ON TG.TRANSACTION_INFO_ID = TI.ID
			INNER JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_GROUP_ID = TG.ID
			INNER JOIN TRANSACTION_INFO TI2 ON TI2.ID = TD.TRANSACTION_INFO_ID
			WHERE TI.REFERENCE_ID = ? AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ?';

			SET detailResult.data[] = PASSTHRU(detailQuerry VALUES(inputRef.transactionDetail.referenceId, TransactionType, inputRef.serviceHeader.channel));

			SET outRef.totalTransactions = detailResult.data[1].TRANSACTION_COUNT;
			SET outRef.successfulTransactions = detailResult.data[1].SUCCESS_COUNT;

			IF EXISTS(detailResult.data[]) THEN
				CREATE LASTCHILD OF outRef IDENTITY (JSON.Array)transactionDetailList;
				DECLARE transactionDetailList REFERENCE TO outRef.transactionDetailList;
				DECLARE resultDetailRef, transDetailRef REFERENCE TO detailResult.data;

				WHILE LASTMOVE(resultDetailRef) DO
					CREATE LASTCHILD OF transactionDetailList AS transDetailRef TYPE Name NAME 'Item';
					SET transDetailRef.transactionType = resultDetailRef.TRANSACTION_TYPE;
					SET transDetailRef.transactionSubType = resultDetailRef.TRANSACTION_SUBTYPE;
					SET transDetailRef.referenceId = resultDetailRef.REFERENCE_ID;
					SET transDetailRef.status = resultDetailRef.TRANSACTION_STATUS;
					MOVE resultDetailRef NEXTSIBLING REPEAT TYPE NAME;
				END WHILE;

			END IF;
		END IF;
	ELSE
		SET outRef.responseHeader.responseCode = '94';
		CALL getMappedResponseDescription(outRef.responseHeader.responseCode, outRef.responseHeader.responseDetails.Item[1]);
	END IF;

	RETURN TRUE;
END;

END MODULE;


CREATE COMPUTE MODULE TransactionDetailStatus
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CALL logDebugMessage('Inside Transaction Detail Status Module');
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE singleResult,detailResult, statusResult ROW;

		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;

		SET OutputRoot.Properties = InputProperties;
		SET outRef.serviceHeader = inputRef.serviceHeader;
		SET outRef.transactionInfo = inputRef.transactionInfo;

		CALL PopulateSuccessResponseHeader(outRef, 'SUCCESS');

		DECLARE transactionRef REFERENCE TO inputRef.transactionDetail.transactions.Item;
		DECLARE detailQuerry, transactionAttrQuery, batchstatusquery CHARACTER '';
		DECLARE messageData ROW;
		DECLARE noOfFoundedTrans INTEGER 0;
		DECLARE noOfTotalTrans INTEGER 0;

		IF (inputRef.transactionDetail.isGroup) THEN
			---fetech batch status start by Adnan 14-Oct-2020------
			SET batchstatusquery='select TRANSACTION_STATUS_DESCRIPTION from TRANSACTION_GROUP tg, transaction_info ti where tg.TRANSACTION_INFO_ID=ti.id and ti.REFERENCE_ID=?';
			SET statusResult.data[] = PASSTHRU(batchstatusquery VALUES(inputRef.transactionDetail.transactions.Item.referenceId));

			IF (EXISTS(statusResult.data[]) AND statusResult.data[1].TRANSACTION_STATUS_DESCRIPTION='BATCH_FAILED' ) THEN

				Call logInfoMessage('statusResult.data[1].TRANSACTION_STATUS_DESCRIPTION: '|| statusResult.data[1].TRANSACTION_STATUS_DESCRIPTION);
				SET detailQuerry = 'SELECT TI2.TRANSACTION_TYPE, TI.PROCESSING_MODE, TI2.TRANSACTION_SUBTYPE, TI2.REFERENCE_ID, TD.TRANSACTION_STATUS,
				TL.HOST_RESPONSE_CODE, TL.HOST_RESPONSE_DESCRIPTION, TL.TRANSACTION_REFERENCE_ID, TL.CREDIT_TRAN_REF_ID,
				TL.DESTINATION_SYSTEM, TG.ID AS GROUP_ID, TG.HOST_SYSTEM_GROUP_ID, TG.TRANSACTION_COUNT, TG.SUCCESS_COUNT, TG.TRANSACTION_STATUS AS GROUP_TRANSACTION_STATUS,
				TG.TRANSACTION_STATUS_DESCRIPTION
				FROM TRANSACTION_INFO TI
				INNER JOIN TRANSACTION_GROUP TG ON TG.TRANSACTION_INFO_ID = TI.ID
				INNER JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_GROUP_ID = TG.ID
				INNER JOIN TRANSACTION_INFO TI2 ON TI2.ID = TD.TRANSACTION_INFO_ID
				left JOIN TRANSACTION_LOG TL ON TL.TRANSACTION_INFO_ID = TI2.ID AND TL.DESTINATION_SYSTEM <> ''IIB''
				WHERE ((TL.HOST_RESPONSE_DESCRIPTION IS NOT NULL AND TL.HOST_RESPONSE_DESCRIPTION<>''BATCH PROCESSING HAS BEEN STARTED SUCESSFULLY'') OR TD.TRANSACTION_STATUS=''RECEIVED'') AND TI.REFERENCE_ID = ? AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ? AND (TI.PROCESSING_MODE = ''BULK'' OR (TI.PROCESSING_MODE = ''BATCH'' AND ROWNUM <= TG.TRANSACTION_COUNT+1))
				ORDER BY TI.REFERENCE_ID, TL.ID';

			ELSE
				Call logInfoMessage('else statusResult.data[1].TRANSACTION_STATUS_DESCRIPTION: ');
				SET detailQuerry = 'SELECT * FROM (
				SELECT TL.ID, TI2.TRANSACTION_TYPE, TI.PROCESSING_MODE, TI2.TRANSACTION_SUBTYPE, TI2.REFERENCE_ID, TD.TRANSACTION_STATUS,
				TL.HOST_RESPONSE_CODE, TL.HOST_RESPONSE_DESCRIPTION, TL.TRANSACTION_REFERENCE_ID, TL.CREDIT_TRAN_REF_ID,
				TL.DESTINATION_SYSTEM, TG.ID AS GROUP_ID, TG.HOST_SYSTEM_GROUP_ID, TG.TRANSACTION_COUNT, TG.SUCCESS_COUNT, TG.TRANSACTION_STATUS AS GROUP_TRANSACTION_STATUS,
				TG.TRANSACTION_STATUS_DESCRIPTION
				FROM TRANSACTION_INFO TI
				INNER JOIN TRANSACTION_GROUP TG ON TG.TRANSACTION_INFO_ID = TI.ID
				INNER JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_GROUP_ID = TG.ID
				INNER JOIN TRANSACTION_INFO TI2 ON TI2.ID = TD.TRANSACTION_INFO_ID
				left JOIN TRANSACTION_LOG TL ON TL.TRANSACTION_INFO_ID = TI2.ID AND TL.DESTINATION_SYSTEM <> ''IIB''
				WHERE TI.REFERENCE_ID = ? AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ?
				ORDER BY TI.REFERENCE_ID, TL.ID DESC) GROUP_STATUS
				WHERE (PROCESSING_MODE = ''BULK'' OR (PROCESSING_MODE = ''BATCH'' AND ROWNUM <= TRANSACTION_COUNT+1))
				ORDER BY ID';

			END IF;
			-------------fetech batch status end by Adnan 14-Oct-2020-----------------

			SET detailResult.data[] = PASSTHRU(detailQuerry VALUES(inputRef.transactionDetail.transactions.Item.referenceId, TransactionType, inputRef.serviceHeader.channel));
			SET outRef.groupId = detailResult.data[1].GROUP_ID;
			SET outRef.hostSystemGroupId = detailResult.data[1].HOST_SYSTEM_GROUP_ID;
			SET outRef.totalTransactions = detailResult.data[1].TRANSACTION_COUNT;
			SET outRef.successfulTransactions = detailResult.data[1].SUCCESS_COUNT;
			IF detailResult.data[1].PROCESSING_MODE = 'BATCH' THEN
				SET outRef.processingStatus = detailResult.data[1].TRANSACTION_STATUS_DESCRIPTION;
			ELSE
				SET outRef.processingStatus = detailResult.data[1].GROUP_TRANSACTION_STATUS;
			END IF;

		ELSE
			DECLARE parameters CHARACTER '';
			-- DECLARE messageData ROW;

			WHILE LASTMOVE(transactionRef) DO
				SET parameters = parameters || '?,';
				CREATE LASTCHILD OF messageData NAME ('Param') VALUE(transactionRef.referenceId);
				SET noOfTotalTrans = noOfTotalTrans + 1;
				MOVE transactionRef NEXTSIBLING REPEAT NAME;
			END WHILE;
			--removing trailing ','
			SET parameters = TRIM(TRAILING ',' FROM parameters);
			CREATE LASTCHILD OF messageData NAME ('Param') VALUE(TransactionType);
			CREATE LASTCHILD OF messageData NAME ('Param') VALUE(inputRef.serviceHeader.channel);

			SET detailQuerry = 'SELECT TD.TRANSACTION_STATUS, TI.PROCESSING_MODE, TI.TRANSACTION_TYPE, TI.TRANSACTION_SUBTYPE, TI.REFERENCE_ID
			FROM TRANSACTION_INFO TI
			INNER JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_INFO_ID = TI.ID
			WHERE TI.REFERENCE_ID IN (' || parameters || ') AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ?';

			SET transactionAttrQuery = 'SELECT TD.ID, TI.REFERENCE_ID, TA.ATTRIBUTE_KEY, TA.ATTRIBUTE_VALUE
			FROM TRANSACTION_INFO TI
			INNER JOIN TRANSACTION_DETAIL TD ON TD.TRANSACTION_INFO_ID = TI.ID
			LEFT JOIN TRANSACTION_ATTRIBUTE TA ON TA.TRANSACTION_DETAIL_ID = TD.ID
			WHERE TI.REFERENCE_ID IN (' || parameters || ') AND TI.TRANSACTION_TYPE = ? AND TI.CHANNEL = ?';

			SET detailResult.data[] = PASSTHRU(detailQuerry VALUES(messageData.Param[]));

		END IF;

		IF EXISTS(detailResult.data[]) THEN
			CREATE LASTCHILD OF outRef IDENTITY (JSON.Array)transactionDetailList;
			DECLARE transactionDetailList,hostReferenceListRef,hostReferenceItemsRef REFERENCE TO outRef.transactionDetailList;
			DECLARE resultDetailRef, transDetailRef REFERENCE TO detailResult.data;
			DECLARE responseCode, responseDescription CHARACTER '';

			DECLARE transAttr ROW;
			IF NOT (inputRef.transactionDetail.isGroup) THEN
				SET transAttr.data[] = PASSTHRU (transactionAttrQuery VALUES(messageData.Param[]));
			END IF;

			WHILE LASTMOVE(resultDetailRef) DO
				CREATE LASTCHILD OF transactionDetailList AS transDetailRef TYPE Name NAME 'Item';
				SET transDetailRef.transactionType = resultDetailRef.TRANSACTION_TYPE;
				SET transDetailRef.transactionSubType = resultDetailRef.TRANSACTION_SUBTYPE;
				SET transDetailRef.referenceId = resultDetailRef.REFERENCE_ID;
				SET transDetailRef.status = resultDetailRef.TRANSACTION_STATUS;
				-- SET transDetailRef.hostSystem = resultDetailRef.DESTINATION_SYSTEM;
				-- SET transDetailRef.hostSystemReferenceId = resultDetailRef.TRANSACTION_REFERENCE_ID;
				CREATE FIELD transDetailRef.hostReferenceList AS hostReferenceListRef IDENTITY (JSON.Array)hostReferenceList;
				-- CREATE LASTCHILD OF hostReferenceListRef AS hostReferenceItemsRef NAME ('Item');

				IF NOT (inputRef.transactionDetail.isGroup) THEN
					DECLARE transAttrTemp ROW;
					SET transAttrTemp.rows[] = (SELECT A FROM transAttr.data[] AS A WHERE A.REFERENCE_ID = resultDetailRef.REFERENCE_ID);
					DECLARE transAttrTempRef REFERENCE TO transAttrTemp.rows;
					WHILE LASTMOVE(transAttrTempRef) DO

						IF transAttrTempRef.ATTRIBUTE_KEY = 'responseCode' THEN
							SET responseCode = transAttrTempRef.ATTRIBUTE_VALUE;

						ELSEIF transAttrTempRef.ATTRIBUTE_KEY = 'responseDescription' THEN
							SET responseDescription = transAttrTempRef.ATTRIBUTE_VALUE;

						ELSE
							CREATE LASTCHILD OF hostReferenceListRef AS hostReferenceItemsRef NAME ('Item');

							SET hostReferenceItemsRef.name = COALESCE(transAttrTempRef.ATTRIBUTE_KEY, '');
							SET hostReferenceItemsRef.value = COALESCE(transAttrTempRef.ATTRIBUTE_VALUE, '');
						END IF;

						MOVE transAttrTempRef NEXTSIBLING REPEAT TYPE NAME;
					END WHILE;

					SET transDetailRef.hostResponseCode = COALESCE(responseCode, '');
					SET transDetailRef.hostResponseDescription = COALESCE(responseDescription, '');
					SET responseCode = '';
					SET responseDescription = '';

					MOVE resultDetailRef NEXTSIBLING REPEAT TYPE NAME;
				ELSE
					CREATE LASTCHILD OF hostReferenceListRef AS hostReferenceItemsRef NAME ('Item');

					SET hostReferenceItemsRef.name = resultDetailRef.DESTINATION_SYSTEM;
					SET hostReferenceItemsRef.value = COALESCE(resultDetailRef.TRANSACTION_REFERENCE_ID, '');
					SET transDetailRef.hostResponseCode = COALESCE(resultDetailRef.HOST_RESPONSE_CODE, '');
					SET transDetailRef.hostResponseDescription = COALESCE(resultDetailRef.HOST_RESPONSE_DESCRIPTION, '');

					IF NOT isEmptyString(resultDetailRef.CREDIT_TRAN_REF_ID) THEN
						CREATE LASTCHILD OF hostReferenceListRef AS hostReferenceItemsRef NAME ('Item');
						SET hostReferenceItemsRef.name = resultDetailRef.DESTINATION_SYSTEM||'Credit';
						SET hostReferenceItemsRef.value = COALESCE(resultDetailRef.CREDIT_TRAN_REF_ID, '');
					END IF;

					DECLARE previousHost CHARACTER resultDetailRef.DESTINATION_SYSTEM;
					MOVE resultDetailRef NEXTSIBLING REPEAT TYPE NAME;
					--reference id repeat means multi lag transaction
					IF (transDetailRef.referenceId = resultDetailRef.REFERENCE_ID) THEN
						IF (previousHost <> resultDetailRef.DESTINATION_SYSTEM) THEN
							CREATE LASTCHILD OF hostReferenceListRef AS hostReferenceItemsRef NAME ('Item');

							SET hostReferenceItemsRef.name = resultDetailRef.DESTINATION_SYSTEM;
							SET hostReferenceItemsRef.value = COALESCE(resultDetailRef.TRANSACTION_REFERENCE_ID, '');
						END IF;
						MOVE resultDetailRef NEXTSIBLING REPEAT TYPE NAME;
					END IF;
				END IF;
				SET noOfFoundedTrans = noOfFoundedTrans + 1;
			END WHILE;
			--In case number of transacitons greater than 1 and found transactions less than total transactions
			-- then create response no matching records.
			IF NOT (inputRef.transactionDetail.isGroup) AND (noOfTotalTrans > 1 AND noOfFoundedTrans < noOfTotalTrans) THEN
				DELETE LASTCHILD OF messageData;
				DELETE LASTCHILD OF messageData;

				DECLARE referenceIdRef REFERENCE TO messageData.Param;

				WHILE LASTMOVE(referenceIdRef) DO
					DECLARE value CHARACTER CAST(referenceIdRef AS CHARACTER);
					DECLARE notFoundReferenceId ROW;
					SET notFoundReferenceId.row[] = (SELECT A FROM detailResult.data[] AS A WHERE A.REFERENCE_ID = value);

					IF NOT EXISTS(notFoundReferenceId.row[]) THEN
						CREATE LASTCHILD OF outRef.transactionDetailList AS transDetailRef TYPE Name NAME 'Item';
						SET transDetailRef.referenceId = value;
						SET transDetailRef.hostResponseCode = '94';
						SET transDetailRef.hostResponseDescription = 'No Matching Records';
					END IF;

					MOVE referenceIdRef NEXTSIBLING REPEAT TYPE NAME;
				END WHILE;
			END IF;
		ELSE
			SET outRef.responseHeader.responseCode = '94';
			CALL getMappedResponseDescription(outRef.responseHeader.responseCode, outRef.responseHeader.responseDetails.Item[1]);
		END IF;

		RETURN TRUE;
	END;

END MODULE;


CREATE FILTER MODULE ValidateStatusRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CREATE FIELD Environment.Variables.Transaction.Error IDENTITY (JSON.Array);
		DECLARE inputRef REFERENCE TO Root.JSON.Data;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;

		CALL validateServiceHeader(inputRef.serviceHeader, Environment.Variables.Transaction);
		CALL validateTransactionInfo(inputRef.transactionInfo, Environment.Variables.Transaction, TransactionType, TransactionSubType);
		-- IF EXISTS(SELECT TI.ID FROM Database.TRANSACTION_INFO AS TI
		-- WHERE TI.REFERENCE_ID = inputRef.transactionInfo.referenceId
		-- AND TI.CHANNEL = inputRef.serviceHeader.channel) THEN
		--
		-- THROW USER EXCEPTION MESSAGE 71 VALUES('Duplicate Transaction');
		-- END IF;

		RETURN EXISTS(Environment.Variables.Transaction.Error.Item[]);
	END;
END MODULE;


CREATE FILTER MODULE ValidateDetailStatusRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CREATE FIELD Environment.Variables.Transaction.Error IDENTITY (JSON.Array);
		DECLARE inputRef, trans REFERENCE TO Root.JSON.Data;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE ftGroupStatusLimit CHARACTER getGroupConfigProperty(null,null,'STATUS_INQUIRY_LIST_LIMIT');

		CALL validateServiceHeader(inputRef.serviceHeader, Environment.Variables.Transaction);
		CALL validateTransactionInfo(inputRef.transactionInfo, Environment.Variables.Transaction, TransactionType, TransactionSubType);
		-- IF EXISTS(SELECT TI.ID FROM Database.TRANSACTION_INFO AS TI
		-- WHERE TI.REFERENCE_ID = inputRef.transactionInfo.referenceId
		-- AND TI.CHANNEL = inputRef.serviceHeader.channel) THEN
		--
		-- THROW USER EXCEPTION MESSAGE 71 VALUES('Duplicate Transaction');
		-- END IF;

		IF(inputRef.transactionDetail.isGroup) THEN
		IF NOT SINGULAR(inputRef.transactionDetail.transactions.Item[]) THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE 'Single reference ID allowed for group status';
		END IF;
	ELSE
		IF (CARDINALITY(inputRef.transactionDetail.transactions.Item[]) < 1) THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE 'At least one reference ID needed for status';
		ELSEIF CARDINALITY(inputRef.transactionDetail.transactions.Item[]) > CAST(ftGroupStatusLimit AS INTEGER) THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE 'At max ' || ftGroupStatusLimit || ' reference IDs accepted';
		END IF;
	END IF;

	RETURN EXISTS(Environment.Variables.Transaction.Error.Item[]);
END;
END MODULE;


CREATE COMPUTE MODULE PrepareStatusErrorResponse
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CREATE FIELD OutputRoot.JSON.Data;

		DECLARE responseRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE transactionRef REFERENCE TO InputRoot.JSON.Data;

		SET OutputRoot.Properties = InputProperties;
		SET responseRef.serviceHeader = transactionRef.serviceHeader;
		SET responseRef.transactionInfo = transactionRef.transactionInfo;
		SET responseRef.responseHeader.responseCode = '01';
		CREATE FIELD responseRef.responseHeader.responseDetails IDENTITY (JSON.Array);
		SET responseRef.responseHeader.responseDetails = Environment.Variables.Transaction.Error;

		RETURN TRUE;
	END;

END MODULE;


CREATE FILTER MODULE SaveStatusRequestInfo
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE requestRef REFERENCE TO Body.*[1];
		CREATE FIELD Environment.Variables.Transaction;
		DECLARE transactionRef REFERENCE TO Environment.Variables.Transaction;
		SET transactionRef.Request = requestRef;

		IF isEmptyString(transactionRef.Request.transactionInfo.transactionSubType) THEN
			SET transactionRef.Request.transactionInfo.transactionSubType = 'STATUS';
		END IF;
		SET transactionRef.Properties = Root.Properties;
		SET transactionRef.SourceIp = Root.HTTPInputHeader."X-Remote-Host";

		RETURN TRUE;
	END;
END MODULE;

CREATE FILTER MODULE SetStatusTransactionSubType
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE transactionRef REFERENCE TO Environment.Variables.Transaction.Request.transactionInfo;

		IF isEmptyString(transactionRef.transactionSubType) THEN
			SET transactionRef.transactionSubtype = 'STATUS';
		END IF;

		RETURN TRUE;
	END;
END MODULE;