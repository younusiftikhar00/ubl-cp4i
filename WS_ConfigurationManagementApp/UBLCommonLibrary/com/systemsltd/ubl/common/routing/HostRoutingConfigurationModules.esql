BROKER SCHEMA com.systemsltd.ubl.common.routing

PATH com.systemsltd.common.logging, com.systemsltd.common.cache, com.systemsltd.ubl.common.config, com.systemsltd.common,
	com.systemsltd.ubl.common;


DECLARE hostIRIS SHARED CONSTANT CHARACTER 'IRIS';
DECLARE hostCBS SHARED CONSTANT CHARACTER 'CBS';
DECLARE multiHost SHARED CONSTANT ROW ROW(LIST{'FUND_TRANSFER', 'INTER_BANK_FUND_TRANSFER'} as transactions[]);
DECLARE toAccountDetailPath, fromAccountDetailPath EXTERNAL CHARACTER '';
	
	
CREATE FUNCTION getUBLHostSystem(IN bankIMD CHARACTER, IN branchCode CHARACTER, IN accountType CHARACTER, IN iban CHARACTER, IN countryCode CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE hostSystem CHARACTER hostCBS;
	DECLARE ublBankIMD CHARACTER getUBLBankIMD();
	
	IF countryCode IS NULL OR UPPER(countryCode) = 'PK' THEN
		IF (bankIMD <> ublBankIMD) THEN	
			SET hostSystem = hostIRIS;
		ELSE
			-- logic to cater host routing based on iban host indetifier
			IF NOT isEmptyString(iban) THEN
				DECLARE countryCode, checkDigit, swiftCode, hostIdentification, accountLength, accountNumber CHARACTER '';
				CALL populateAccountInfoFromIBAN(iban, countryCode, checkDigit, swiftCode,
					hostIdentification, accountLength, accountNumber);
					
				SET hostSystem = getGroupConfigProperty('IBAN_HOST_IDENTIFIER', '', hostIdentification);
			ELSE 
				DECLARE result ROW;
				SET result.data[] = (SELECT ROUTE.HOST_SYSTEM AS hostSystem, ROUTE.ACCOUNT_TYPE FROM Database.SYSTEM_ROUTING_INFO AS ROUTE 
										WHERE ROUTE.BANK_IMD = bankIMD AND ROUTE.BRANCH_CODE = branchCode); --AND ROUTE.ACCOUNT_TYPE = accountType);
			 	
			 	-- logic to cater the routing based on account type
			 	DECLARE resultRef REFERENCE TO result.data;
			 	X:WHILE LASTMOVE (resultRef) DO 
					IF (resultRef.ACCOUNT_TYPE = accountType) THEN 
						SET hostSystem = resultRef.hostSystem;
						LEAVE X;
					ELSE
						SET hostSystem = resultRef.hostSystem;
					END IF;
					
					MOVE resultRef NEXTSIBLING;
				END WHILE;
			END IF;
			
		 	SET hostSystem = COALESCE(hostSystem, hostCBS);
		END IF;
	END IF;

	RETURN hostSystem;
END;


CREATE COMPUTE MODULE RouteRequestToHostSystem
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE requestRef, fromAccountRef REFERENCE TO InputRoot.[<].[<];
		DECLARE accountRefPath CHARACTER 'MOVE fromAccountRef TO ' || fromAccountDetailPath;
		EVAL(accountRefPath);

		DECLARE bankIMD CHARACTER fromAccountRef.branchInfo.bankInfo.bankIMD;
		DECLARE countryCode CHARACTER requestRef.serviceHeader.fromRegionInfo.countryCode;
		DECLARE hostSystem CHARACTER getUBLHostSystem(bankIMD, fromAccountRef.branchInfo.branchCode, fromAccountRef.accountType, fromAccountRef.[>].iban, countryCode);
		DECLARE toHostSystem CHARACTER;
		
		IF UPPER(requestRef.transactionInfo.transactionType) IN (multiHost.transactions[]) THEN
			DECLARE toAccountRef REFERENCE TO requestRef.[<];
			SET accountRefPath = 'MOVE toAccountRef TO ' || toAccountDetailPath;
			EVAL(accountRefPath);
			
			SET countryCode = requestRef.serviceHeader.toRegionInfo.countryCode;
			SET toHostSystem = getUBLHostSystem(toAccountRef.branchInfo.bankInfo.bankIMD, toAccountRef.branchInfo.branchCode, toAccountRef.accountType, toAccountRef.[>].iban, countryCode);
		END IF;	
			
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		IF (hostSystem = hostIRIS OR toHostSystem = hostIRIS) THEN
			CALL prepareAndForwardToHost(hostIRIS);
		ELSE
			SET Environment.Variables.dataSource = Environment.Variables.fromRegionDataSource;
			DELETE FIELD Environment.Variables.fromRegionDataSource;
			CALL prepareAndForwardToHost(hostSystem);
			
			-- If any of the system is IRIS then we don't need to route transaction second time
			IF (hostSystem <> toHostSystem) AND UPPER(Environment.Variables.Transaction.HostResponse.status) = 'SUCCESS' THEN
				SET Environment.Variables.dataSource = Environment.Variables.toRegionDataSource;
				DELETE FIELD Environment.Variables.toRegionDataSource;
				CALL prepareAndForwardToHost(toHostSystem);
			END IF;
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE prepareAndForwardToHost(IN givenHostSystem CHARACTER) 
	BEGIN
		SET OutputLocalEnvironment.RouteToHost = givenHostSystem;
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
	END;

END MODULE;
