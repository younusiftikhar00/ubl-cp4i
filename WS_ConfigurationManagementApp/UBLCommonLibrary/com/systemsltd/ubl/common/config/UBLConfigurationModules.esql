BROKER SCHEMA com.systemsltd.ubl.common.config

PATH com.systemsltd.common.logging, com.systemsltd.common.cache, com.systemsltd.common;

DECLARE DataMaskConfigCache CONSTANT CHARACTER 'DataMaskConfigCache';
DECLARE codeMappingCache CONSTANT CHARACTER 'CodeMappingCache';
DECLARE RESPONSE_CODE_TYPE CONSTANT CHARACTER 'RESPONSE_CODE';
DECLARE CURRENCY_CODE_TYPE CONSTANT CHARACTER 'CURRENCY_CODE';
DECLARE CHANNEL_CODE_TYPE CONSTANT CHARACTER 'CHANNEL_CODE';
DECLARE ACCOUNT_TYPE_CODE CONSTANT CHARACTER 'ACCOUNT_TYPE_CODE';

CREATE FUNCTION getUBLBankIMDKey() RETURNS CHARACTER
BEGIN
	RETURN 'UBL_BANK_IMD';
END;


CREATE FUNCTION getHostRoutingCacheKey() RETURNS CHARACTER
BEGIN
	RETURN 'HOST_ROUTING_CONFIG';
END;


CREATE FUNCTION getMaxChunkSizeKey() RETURNS CHARACTER
BEGIN
	RETURN 'MAX_CHUNK_SIZE';
END;


CREATE FUNCTION getCodeMappingCache() RETURNS CHARACTER
BEGIN
	RETURN codeMappingCache;
END;


CREATE FUNCTION getDataMaskConfigCache() RETURNS CHARACTER
BEGIN
	RETURN DataMaskConfigCache;
END;


CREATE FUNCTION getResponseCodeType() RETURNS CHARACTER
BEGIN
	RETURN RESPONSE_CODE_TYPE;
END;


CREATE FUNCTION getCurrencyCodeType() RETURNS CHARACTER
BEGIN
	RETURN CURRENCY_CODE_TYPE;
END;


CREATE FUNCTION getAccountTypeCode() RETURNS CHARACTER
BEGIN
	RETURN ACCOUNT_TYPE_CODE;
END;


CREATE FUNCTION getChannelCodeType() RETURNS CHARACTER
BEGIN
	RETURN CHANNEL_CODE_TYPE;
END;


CREATE FUNCTION getCodeMappingValue(key CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE value CHARACTER readFromCache(codeMappingCache, key);
	RETURN value;
END;


--CREATE FUNCTION getDataMaskConfig(key CHARACTER) RETURNS CHARACTER
--BEGIN
--	DECLARE value CHARACTER readFromCache(DataMaskConfigCache, key);
--	RETURN value;
--END;


CREATE FUNCTION getUBLBankIMD() RETURNS CHARACTER
BEGIN
	DECLARE key CHARACTER getUBLBankIMDKey();
	RETURN getConfigProperty(key);
END;


CREATE FUNCTION getAsyncResponseQueue() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('ASYNC_RESPONSE_QUEUE');
END;


CREATE FUNCTION getSAFResponseQueue() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('SAF_RESPONSE_QUEUE');
END;


CREATE FUNCTION getMaxChunkSize() RETURNS CHARACTER
BEGIN
	DECLARE key CHARACTER getMaxChunkSizeKey();
	RETURN getConfigProperty(key);
END;


CREATE FUNCTION getReversalDelay() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('FUND_TRANSFER_REVERSAL_DELAY');
END;


CREATE FUNCTION getServiceProperty(channel CHARACTER, serviceName CHARACTER, propertyName CHARACTER) RETURNS CHARACTER
BEGIN
--	DECLARE configKey CHARACTER CASE WHEN isEmptyString(channel) THEN '' ELSE channel || '_' END;
	DECLARE configKey CHARACTER CASE WHEN isEmptyString(channel) THEN '' ELSE channel END;
	SET configKey = CASE WHEN isEmptyString(configKey) THEN serviceName ELSE (configKey || '_' || serviceName)  END;
	SET configKey = CASE WHEN isEmptyString(configKey) THEN propertyName ELSE (configKey || '_' || propertyName) END;
	
	DECLARE serviceProperty CHARACTER getConfigProperty(configKey);
	
	IF isEmptyString(serviceProperty) THEN
		SET serviceProperty = getConfigProperty('DEFAULT_' || propertyName);
	END IF;
	
	return serviceProperty;
END;


CREATE FUNCTION getServiceRetryCount(channel CHARACTER, serviceName CHARACTER) RETURNS INTEGER
BEGIN
	DECLARE retryCount INTEGER CAST(getServiceProperty(channel, serviceName, 'RETRY_COUNT') AS INTEGER);
	
	IF (NOT isPositiveInteger(retryCount)) THEN
		SET retryCount = 1;
	END IF;
	
	RETURN retryCount;
END;


CREATE FUNCTION getServiceDelayInterval(channel CHARACTER, serviceName CHARACTER) RETURNS INTEGER
BEGIN
	DECLARE delayInterval INTEGER CAST(getServiceProperty(channel, serviceName, 'DELAY_INTERVAL') AS INTEGER);
	
	IF (NOT isPositiveInteger(delayInterval)) THEN
		SET delayInterval = 0;
	END IF;
	
	RETURN delayInterval;
END;


CREATE FUNCTION getGroupConfigProperty(configGroup CHARACTER, channel CHARACTER, propertyName CHARACTER) RETURNS CHARACTER -- To pass mapped channel
BEGIN
	DECLARE configKey CHARACTER CASE WHEN isEmptyString(configGroup) THEN '' ELSE configGroup END;
	SET configKey = CASE WHEN isEmptyString(configKey) THEN channel WHEN isEmptyString(channel) THEN configKey ELSE (configKey || '_' || channel) END;	
	SET configKey = CASE WHEN isEmptyString(configKey) THEN propertyName ELSE (configKey || '_' || propertyName) END;
	
	DECLARE serviceProperty CHARACTER getConfigProperty(configKey);
	CALL logDebugMessage('Fetched value: from cache against key : ' || COALESCE(configKey, ''));
	
	IF isEmptyString(serviceProperty) AND NOT isEmptyString(channel) THEN
		SET configKey = CASE WHEN isEmptyString(configGroup) THEN propertyName ELSE (configGroup || '_' || propertyName) END;
		SET serviceProperty = getConfigProperty(configKey);
		CALL logDebugMessage('Fetched value: from cache against key : ' || COALESCE(configKey, ''));
	END IF;
	
	return serviceProperty;
END;


CREATE FUNCTION getCBSSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('CBS_SCHEMA_NAME');
END;


CREATE FUNCTION getPRIMESchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('PRIME_SCHEMA_NAME');
END;


CREATE FUNCTION getCAPSSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('CAPS_SCHEMA_NAME');
END;


CREATE FUNCTION getOMNISchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('OMNI_SCHEMA_NAME');
END;


CREATE FUNCTION getIRISSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('IRIS_SCHEMA_NAME');
END;


CREATE FUNCTION getIIBSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('IIB_SCHEMA_NAME');
END;


CREATE FUNCTION getCMDSSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('CMDS_SCHEMA_NAME');
END;

-- CR = Central Repository
CREATE FUNCTION getCRSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('CR_SCHEMA_NAME');
END;


CREATE FUNCTION getWCOSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('WCO_SCHEMA_NAME');
END;


CREATE FUNCTION getCBOSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('CBO_SCHEMA_NAME');
END;


CREATE FUNCTION getEBSSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('EBS_SCHEMA_NAME');
END;


CREATE FUNCTION getGNBSchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('GNB_SCHEMA_NAME');
END;


CREATE FUNCTION getEasySchemaName() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('EASY_SCHEMA_NAME');
END;


CREATE FUNCTION getRevokeRequestingChannel() RETURNS CHARACTER
BEGIN
	RETURN getConfigProperty('REVOKE_REQUESTING_CHANNEL');
END;