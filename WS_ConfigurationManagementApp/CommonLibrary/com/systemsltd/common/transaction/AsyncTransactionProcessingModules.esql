BROKER SCHEMA com.systemsltd.common.transaction

PATH com.systemsltd.common, com.systemsltd.common.logging;

CREATE COMPUTE MODULE LoadAsyncTransactionMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Preserving orginal request for recovery and status preparation
		SET Environment.Variables.Transaction.AsyncRequest = InputRoot;
	
		CALL logInfoDecoratedMessage('Async Request Received : ', InputRoot);
		
		DECLARE msgRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE id INTEGER msgRef.transactionId;
		
		DECLARE result, parsedRow ROW;
		SET result.data[] = SELECT MI.*, TD.TRANSACTION_INFO_ID
							FROM Database.MESSAGE_INFO AS MI, Database.{msgRef.transactionSource} AS TD
							WHERE TD.ID = id AND TD.MESSAGE_INFO_ID = MI.ID;
		
		DECLARE dataRef REFERENCE TO result.data;
		SET OutputRoot.Properties = InputProperties;
		
		SET OutputRoot.Properties.CodedCharSetId = CAST(dataRef.CCSID AS INTEGER);
		SET OutputRoot.Properties.Encoding = CAST(dataRef.ENCODING AS INTEGER);
		
		IF LASTMOVE(dataRef) THEN
			DECLARE msgBlob BLOB CAST(dataRef.MESSAGE AS BLOB CCSID OutputRoot.Properties.CodedCharSetId);
			CREATE LASTCHILD OF OutputRoot DOMAIN(dataRef.MESSAGE_DOMAIN)
				PARSE(msgBlob, OutputRoot.Properties.Encoding, OutputRoot.Properties.CodedCharSetId);
			
			CALL logInfoDecoratedMessage('Async Request Prepared : ', OutputRoot);
		END IF;
			
		-- Saving state required by different processing flows (based on sync behavior)
		SET Environment.Variables.Transaction.Request = OutputRoot.[<].[1];
		
		IF msgRef.transactionSource = 'TRANSACTION_SAF_LOG' THEN
			SET Environment.Variables.Transaction.DetailId = msgRef.transactionDetailId;
		ELSE
			SET Environment.Variables.Transaction.DetailId = id;
		END IF;
		SET Environment.Variables.Transaction.transactionInfoId = CAST (dataRef.TRANSACTION_INFO_ID AS INTEGER);
		SET Environment.Variables.Transaction.Properties = OutputRoot.Properties;
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE PrepareAsyncTransactionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE transRequestRef REFERENCE TO Environment.Variables.Transaction.AsyncRequest;
		SET OutputRoot.Properties = transRequestRef.Properties;
		SET OutputRoot.MQMD = transRequestRef.MQMD;
--		SET OutputRoot.JSON.Data = transRequestRef.[<];
		SET OutputRoot.JSON.Data = transRequestRef.JSON.Data;
		CALL logInfoDecoratedMessage('Async Transaction Response Prepared : ', OutputRoot);
		RETURN TRUE;
	END;
END MODULE;


CREATE FILTER MODULE PopulateTransactionStatus
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE responseRef REFERENCE TO Root.JSON.Data;
		
		IF responseRef.responseHeader.responseCode = getSuccessResponseCode() THEN
			SET Environment.Variables.Transaction.AsyncRequest.JSON.Data.transactionStatus =
				responseRef.responseHeader.responseDetails.Item;
		ELSE
			SET Environment.Variables.Transaction.AsyncRequest.JSON.Data.transactionStatus = 'FAILURE';
			
			-- TODO: Test this condition
			IF ( responseRef.responseHeader.responseDetails.retryRequired = 'false' ) THEN
				SET Environment.Variables.Transaction.AsyncRequest.JSON.Data.retryRequired = false;
			END IF;
		END IF;
		CALL logInfoMessage('Populated Async Transaction Status : ' || 
				Environment.Variables.Transaction.AsyncRequest.JSON.Data.transactionStatus);
		RETURN TRUE;
	END;
END MODULE;

