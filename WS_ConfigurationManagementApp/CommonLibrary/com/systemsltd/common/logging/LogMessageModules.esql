BROKER SCHEMA com.systemsltd.common.logging

PATH com.systemsltd.common, com.systemsltd.common.database;

CREATE FILTER MODULE LogMessageExists
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE recordExists BOOLEAN FALSE;
		DECLARE action CHARACTER 'Insert';
		DECLARE inputRef REFERENCE TO Body.trans:TransactionMessage;
		
--		CALL logDebugDecoratedMessage('Payload received for logging', Root);
		CALL logDebugMessage('Checking transaction in TRANSACTION_LOG');

		SET LocalEnvironment.transactionLog = THE(SELECT TL.ID AS TransactionLogID, TL.TRANSACTION_INFO_ID AS TransactionInfoID
														FROM Database.TRANSACTION_LOG AS TL WHERE TL.ID = inputRef.ID);

		IF FIELDTYPE(LocalEnvironment.transactionLog.TransactionLogID) IS NOT NULL THEN
			SET recordExists = TRUE;
			SET action = 'Update';
		END IF;

		CALL logDebugMessage(action || ' entry in TRANSACTION_LOG with ID: ' || COALESCE(CAST(inputRef.ID AS CHARACTER), ''));
		RETURN recordExists;
	END;
END MODULE;


CREATE DATABASE MODULE LogMessageUpdate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE transRef REFERENCE TO Body.trans:TransactionMessage;
		DECLARE messageRef REFERENCE TO transRef.ResponseMessageInfo;
		DECLARE transactionInfo REFERENCE TO transRef.TransactionInfo;

		CALL logDebugMessage('--- Log Message Update starts ---');
		CALL logDebugMessage('Logging transaction with logging id : ' || COALESCE(CAST(CAST(LocalEnvironment.transactionLog.TransactionLogID AS INTEGER) AS CHARACTER), ''));

		--Insertion in MESSAGE_INFO
		DECLARE messageInfoID INTEGER getNextSequenceValue('MESSAGE_INFO_SEQ');
		CALL logDebugMessage('Insert in MESSAGE_INFO starts');
		INSERT INTO Database.MESSAGE_INFO (ID, MESSAGE_DOMAIN, MESSAGE_SETS, MESSAGE_TYPE, MESSAGE_FORMAT,
				ENCODING, CCSID, MESSAGE, ACTIVE_IND, CREATE_DATETIME, CREATED_BY)
				values (messageInfoID, messageRef.MessageDomain, messageRef.MessageSets, messageRef.MessageType,
				messageRef.MessageFormat, messageRef.Encoding, messageRef.CCSID,
				messageRef.Message, 1, CURRENT_TIMESTAMP, 'SYSTEM');
		
		CALL logDebugMessage('Insert in MESSAGE_INFO ends');
		
		--Update in TRANSACTION_INFO
		CALL logDebugMessage('Update in TRANSACTION_INFO starts');
		UPDATE Database.TRANSACTION_INFO AS TI SET COMPLETION_TIME = CURRENT_TIMESTAMP WHERE TI.ID = LocalEnvironment.transactionLog.TransactionInfoID;
		CALL logDebugMessage('Update in TRANSACTION_INFO ends');

		--Update in TRANSACTION_LOG
		CALL logDebugMessage('Update in TRANSACTION_LOG starts');
		UPDATE Database.TRANSACTION_LOG AS TL SET RESPONSE_MESSAGE_INFO_ID = messageInfoID, EXCEPTION_DETAIL = transRef.ExceptionDetail,
													TRANSACTION_STATUS = transRef.TransactionStatus, TRANSACTION_REFERENCE_ID = transRef.TransactionReferenceId, 
													CREDIT_TRAN_REF_ID = transRef.TransactionReferenceIdCR, 
													HOST_RESPONSE_CODE = transRef.systemCode, HOST_RESPONSE_DESCRIPTION = transRef.systemError, MODIFIED_DATETIME = CURRENT_TIMESTAMP  
													WHERE TL.ID = LocalEnvironment.transactionLog.TransactionLogID;
		CALL logDebugMessage('Update in TRANSACTION_LOG ends');
		
		CALL logDebugMessage('Transaction successfully logged');
		CALL logDebugMessage('--- Log Message Update ends ---');
		
	END;
END MODULE;


CREATE DATABASE MODULE LogMessageInsert
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE transRef REFERENCE TO Body.trans:TransactionMessage;
		DECLARE messageRef REFERENCE TO transRef.RequestMessageInfo;
		DECLARE transactionInfo REFERENCE TO transRef.TransactionInfo;
		DECLARE messageInfoID INTEGER transRef.RequestMessageInfo.ID;
		DECLARE transactionInfoID INTEGER transRef.TransactionInfo.ID;
	
		CALL logDebugMessage('--- Log Message Insert starts ---');
		CALL logDebugMessage('Logging transaction with logging id : ' || COALESCE(CAST(CAST(transRef.ID AS INTEGER) AS CHARACTER), ''));
		
		IF messageInfoID IS NULL THEN
			--Insertion in MESSAGE_INFO
			CALL logDebugMessage('Insert in MESSAGE_INFO starts');
			SET messageInfoID = getNextSequenceValue('MESSAGE_INFO_SEQ');
			INSERT INTO Database.MESSAGE_INFO (ID, MESSAGE_DOMAIN, MESSAGE_SETS, MESSAGE_TYPE, MESSAGE_FORMAT,
					ENCODING, CCSID, MESSAGE, ACTIVE_IND, CREATE_DATETIME, CREATED_BY)
					VALUES(messageInfoID, messageRef.MessageDomain, messageRef.MessageSets, messageRef.MessageType,
					messageRef.MessageFormat, messageRef.Encoding, messageRef.CCSID,
					messageRef.Message, 1, CURRENT_TIMESTAMP, 'SYSTEM');
					
			CALL logDebugMessage('Insert in MESSAGE_INFO ends');
		END IF;

		
		IF transactionInfoID IS NULL THEN
			--Insertion in TRANSACTION_INFO
			SET transactionInfoID = getNextSequenceValue('TRANSACTION_INFO_SEQ');
			CALL logDebugMessage('Insert in TRANSACTION_INFO starts');
			INSERT INTO Database.TRANSACTION_INFO(ID, CHANNEL, TRANSACTION_TYPE, TRANSACTION_SUBTYPE, 
					REFERENCE_ID, PROCESSING_NATURE, PROCESSING_MODE, RECEIVED_TIME, ACTIVE_IND,
					CREATE_DATETIME, CREATED_BY, NARRATION, TRANSACTION_DATETIME, TRANSMISSION_DATETIME, STAN)
					VALUES(transactionInfoID, transactionInfo.Channel, transactionInfo.TransactionType,
					transactionInfo.TransactionSubtype, transactionInfo.ReferenceID,
					transactionInfo.ProcessingNature, transactionInfo.ProcessingMode,
					transactionInfo.ReceivedTime, '1', CURRENT_TIMESTAMP, 'SYSTEM', transactionInfo.Narration,
					transactionInfo.TransactionDateTime, transactionInfo.TransmissionDateTime, transactionInfo.Stan);
			CALL logDebugMessage('Insert in TRANSACTION_INFO ends');
		END IF;

		
		--Insertion in TRANSACTION_LOG
		CALL logDebugMessage('Insert in TRANSACTION_LOG starts');
		INSERT INTO Database.TRANSACTION_LOG(ID, PARENT_TRANSACTION_ID, TRANSACTION_INFO_ID, REQUEST_MESSAGE_INFO_ID,
				SOURCE_SYSTEM, DESTINATION_SYSTEM, ACTIVE_IND, CREATE_DATETIME, CREATED_BY, EXCEPTION_DETAIL, TRANSACTION_STATUS)
				VALUES(transRef.ID, transRef.ParentTransactionID, transactionInfoID, messageInfoID,
				 transRef.SourceSystem, transRef.DestinationSystem, 1, CURRENT_TIMESTAMP, 'SYSTEM', transRef.ExceptionDetail, transRef.TransactionStatus);
		CALL logDebugMessage('Insert in TRANSACTION_LOG ends');

		CALL logDebugMessage('Transaction successfully logged');
		
		CALL logDebugMessage('--- Log Message Insert ends ---');
		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE PrepareEventLog
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.trans:TransactionMessage;
		
		CREATE FIELD OutputRoot.XMLNSC.EventLog;
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.EventLog;
		
		SET outputRef.UserId = COALESCE(inputRef.SourceSystem, '');
		SET outputRef.MachineIp = COALESCE(inputRef.SourceIp, '');
		SET outputRef.TransactionType = COALESCE(inputRef.TransactionInfo.TransactionType, '');
		SET outputRef.Destination = COALESCE(inputRef.DestinationSystem, '');
		SET outputRef.ArrivalDateTime = COALESCE(inputRef.ReceiveDateTime, '');
		SET outputRef.TransactionLogId = inputRef.ID;
		
		RETURN TRUE;
	END;

END MODULE;