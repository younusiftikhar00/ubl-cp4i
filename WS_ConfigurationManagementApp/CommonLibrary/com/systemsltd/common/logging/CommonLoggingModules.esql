BROKER SCHEMA com.systemsltd.common.logging

PATH com.systemsltd.common, com.systemsltd.common.database, com.systemsltd.common.util,
		com.systemsltd.common.cache;

DECLARE trans NAMESPACE 'http://www.systemsltd.com/common/transaction';

DECLARE asyncProcessingRequired EXTERNAL CONSTANT BOOLEAN TRUE;
DECLARE fileLoggingRequired EXTERNAL CONSTANT BOOLEAN TRUE;
DECLARE databaseLoggingRequired EXTERNAL CONSTANT BOOLEAN TRUE;
DECLARE newRequest EXTERNAL CONSTANT BOOLEAN TRUE;
DECLARE deleteMessageId EXTERNAL CONSTANT BOOLEAN TRUE;

-- direction = request/response
DECLARE decoration, idPath, sourceSystem, destinationSystem, status EXTERNAL CONSTANT CHARACTER '';


DECLARE GET_MASK_DATA_CONFIG_1 CONSTANT CHARACTER 'SELECT * FROM DATA_MASK_CONFIG
												WHERE
												TRANSACTION_TYPE = ?
												AND (TRANSACTION_SUBTYPE IS NULL OR TRANSACTION_SUBTYPE = ?)
												AND DESTINATION_SYSTEM = ? AND SOURCE_SYSTEM = ?';

DECLARE GET_MASK_DATA_CONFIG_2 CONSTANT CHARACTER 'SELECT * FROM DATA_MASK_CONFIG
												WHERE
												TRANSACTION_TYPE = ?
												AND (TRANSACTION_SUBTYPE IS NULL OR TRANSACTION_SUBTYPE = ?)
												AND DESTINATION_SYSTEM IS NULL AND SOURCE_SYSTEM = ?';

DECLARE GET_MASK_DATA_CONFIG_3 CONSTANT CHARACTER 'SELECT * FROM DATA_MASK_CONFIG
												WHERE
												TRANSACTION_TYPE = ?
												AND (TRANSACTION_SUBTYPE IS NULL OR TRANSACTION_SUBTYPE = ?)
												AND SOURCE_SYSTEM IS NULL AND DESTINATION_SYSTEM = ?';
												
DECLARE GET_MASK_DATA_CONFIG_4 CONSTANT CHARACTER 'SELECT * FROM DATA_MASK_CONFIG
												WHERE ACTIVE_IND = 1 AND
												(TRANSACTION_TYPE IS NULL OR TRANSACTION_TYPE = ?)
												AND (TRANSACTION_SUBTYPE IS NULL OR TRANSACTION_SUBTYPE = ?)
												AND DESTINATION_SYSTEM = ? AND MSG_FORMAT = ?';
												
CREATE FILTER MODULE LogExceptionFilter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE exceptionDetails CHARACTER 'Exception occured in ' || MessageFlowLabel || ' ';
		DECLARE exceptionRef REFERENCE TO ExceptionList.*[1];
		--DECLARE exceptionName, exceptionDetails CHARACTER '';-- SUBSTRING(MessageFlowLabel FROM (POSITION('.' IN MessageFlowLabel REPEAT -1) + 1));
		
		SET exceptionDetails = exceptionDetails || getExceptionDetails(exceptionRef);
		CALL logMessage(loggerName, 'ERROR', exceptionDetails);
		RETURN TRUE;
	END;
END MODULE;


CREATE FILTER MODULE LogMessageFilter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE location INTEGER POSITION('.' IN NodeLabel REPEAT -1);	
		DECLARE decoration CHARACTER SUBSTRING(NodeLabel FROM (location + 5));
		CALL logInfoDecoratedMessage(decoration, Root);
		RETURN TRUE;
	END;
END MODULE;


CREATE FUNCTION populateMessageInfo (messageRef REFERENCE, inputPropertiesRef REFERENCE, messageDomain CHARACTER, data CHARACTER )
BEGIN
	SET messageRef.MessageDomain = messageDomain;
	SET messageRef.MessageSets = inputPropertiesRef.MessageSet;
	SET messageRef.MessageType = emptyStringValue(inputPropertiesRef.MessageType, ' ');
	SET messageRef.MessageFormat = inputPropertiesRef.MessageFormat;
	SET messageRef.Encoding = inputPropertiesRef.Encoding;
	SET messageRef.CCSID = inputPropertiesRef.CodedCharSetId;
	SET messageRef.(XMLNSC.CDataField)Message = data;
END;


CREATE COMPUTE MODULE ClearExceptionTree
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE PrepareAndProcessLogMessageModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Masking
		
		SET OutputRoot = InputRoot;
		
		DECLARE transactionLogId INTEGER 0;
		DECLARE transInfoReq REFERENCE TO InputRoot.JSON.Data;
		DECLARE envTransactionRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE transInfoEnv REFERENCE TO envTransactionRef.Request;
		DECLARE parentTransactionID INTEGER envTransactionRef.parentId;
		DECLARE transactionStatus CHARACTER 'RECEIVED';
		
		DECLARE dataRef REFERENCE TO transInfoReq;
		
		IF NOT LASTMOVE(transInfoReq) THEN
			MOVE dataRef TO Environment.Variables.Transaction.Request;
		END IF;
		
--		DECLARE srcSystem CHARACTER 'SET srcSystem = COALESCE(' || sourceSystem || ', ''IIB'')';
--		EVAL(srcSystem);
		
		DECLARE srcSystem, destSystem CHARACTER '';
		
--		IF NOT isEmptyString(sourceSystem) THEN
--			IF CONTAINS(sourceSystem, '.') THEN
--				SET srcSystem = 'SET srcSystem = ' || sourceSystem;
--				EVAL(srcSystem);
--			ELSE
--				SET srcSystem = sourceSystem;
--			END IF;
--		ELSE
--			SET srcSystem = 'IIB';
--		END IF;
--		
--		IF NOT isEmptyString(destinationSystem) THEN
--			IF CONTAINS(destinationSystem, '.') THEN
--				SET destSystem = 'SET destSystem = ' || destinationSystem;
--				EVAL(destSystem);
--			ELSE
--				SET destSystem = destinationSystem;
--			END IF;
--		ELSE
--			SET destSystem = 'IIB';
--		END IF;

		DECLARE msgFormat CHARACTER FIELDNAME(InputBody);

		IF NOT isEmptyString(destinationSystem) THEN
			IF CONTAINS(destinationSystem, '.') THEN
				SET destSystem = 'SET destSystem = ' || destinationSystem;
				EVAL(destSystem);
			ELSE
				SET destSystem = destinationSystem;
			END IF;
		ELSE
			SET destSystem = 'IIB';
		END IF;
		
		CALL maskData(OutputRoot, dataRef, srcSystem, destSystem, msgFormat);
		
		IF NOT isEmptyString(sourceSystem) THEN
			IF CONTAINS(sourceSystem, '.') THEN
				SET srcSystem = 'SET srcSystem = ' || sourceSystem;
				EVAL(srcSystem);
			ELSE
				SET srcSystem = sourceSystem;
			END IF;
		ELSE
			SET srcSystem = 'IIB';
		END IF;
		
		DECLARE message CHARACTER serializeMessage(OutputRoot);
		
		IF (fileLoggingRequired) THEN
			-- What if both message and exception exist
			IF FIELDTYPE(InputExceptionList.[1]) IS NOT NULL THEN
				SET message = 'Exception occurred in ' || MessageFlowLabel || ' ';
				DECLARE exceptionRef REFERENCE TO InputExceptionList.*[1];
				SET message = message || getExceptionDetails(exceptionRef);
			END IF;
			
			DECLARE destHostURL CHARACTER COALESCE(InputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL, '');
			DECLARE hostInfo CHARACTER 'Source Host: ' || COALESCE(srcSystem, '') || ' Destination Host: ' || COALESCE(destSystem, '');
			SET hostInfo = hostInfo || ' ' || 'Destination Host URL: ' || destHostURL || ' ';
			
			IF isEmptyString(decoration) THEN
				CALL logInfoMessage(hostInfo || decoration || message);
			ELSE 
				CALL logInfoMessage(hostInfo || decoration || ': ' || message);
			END IF;
			
		END IF;
		DELETE FIELD OutputRoot;
		IF (databaseLoggingRequired) THEN
			SET OutputRoot.Properties = InputProperties;
			CREATE FIELD OutputRoot.XMLNSC.trans:TransactionMessage;
			DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.trans:TransactionMessage;
			DECLARE messageDomain CHARACTER FIELDNAME(InputRoot.*[<]);
			DECLARE isSuccess BOOLEAN TRUE;
			
			IF FIELDTYPE(InputExceptionList.[1]) IS NOT NULL THEN
				SET isSuccess = FALSE;
				SET outRef.ExceptionDetail = getExceptionDetails(InputExceptionList);
				
				DECLARE exceptionRef1 REFERENCE TO InputExceptionList;
				CALL moveToLastException(exceptionRef1);
				
				IF exceptionRef1.Number = 3151 THEN
					SET transactionStatus = 'TIMEOUT';
				END IF;
			
			END IF;

			IF (newRequest) THEN
				SET transactionLogId = getNextSequenceValue('TRANSACTION_LOG_SEQ');
				DECLARE setTransactionLogId CHARACTER 'SET ' || idPath || '.TransactionLogId = ' || CAST(transactionLogId AS CHARACTER);
				EVAL(setTransactionLogId);

				CREATE FIELD outRef.RequestMessageInfo;
				CALL populateMessageInfo(outRef.RequestMessageInfo, InputProperties, messageDomain, message);

				-- Identifier for First Log
				IF parentTransactionID IS NULL THEN
					SET parentTransactionID = transactionLogId;
					SET envTransactionRef.parentId = transactionLogId;	
				END IF;

				SET outRef.TransactionInfo.ID = envTransactionRef.transactionInfoId;
--				SET outRef.RequestMessageInfo.ID = envTransactionRef.messageInfoId;	
				SET outRef.TransactionInfo.ReceivedTime = getDefaultTimestamp();

				IF(deleteMessageId) THEN
					DELETE FIELD envTransactionRef.messageInfoId;
				END IF;

			ELSE
				DECLARE getTransactionLogId CHARACTER 'SET transactionLogId = ' || idPath || '.TransactionLogId';
				EVAL(getTransactionLogId);

				SET outRef.TransactionInfo.CompletionTime = getDefaultTimestamp();
				SET outRef.systemCode = envTransactionRef.systemCode;
				SET outRef.systemError = envTransactionRef.systemError;
				
				DELETE FIELD envTransactionRef.systemCode;
				DELETE FIELD envTransactionRef.systemError;

				CREATE FIELD outRef.ResponseMessageInfo;
				CALL populateMessageInfo(outRef.ResponseMessageInfo, InputProperties, messageDomain, message);

				IF NOT isEmptyString(status) AND isSuccess THEN
					DECLARE evalStatus CHARACTER 'SET isSuccess = ' || status;
					EVAL(evalStatus);
				END IF;

				IF transactionStatus <> 'TIMEOUT' THEN
					SET transactionStatus = CASE isSuccess WHEN TRUE THEN 'SUCCESS' ELSE 'FAILURE' END;
				END IF;
			END IF;

			DECLARE transactionDate CHARACTER COALESCE(transInfoReq.transactionInfo.transactionDate, transInfoEnv.transactionInfo.transactionDate);
			DECLARE transactionTime CHARACTER COALESCE(transInfoReq.transactionInfo.transactionTime, transInfoEnv.transactionInfo.transactionTime);

			SET outRef.ID = transactionLogId;
			SET outRef.ParentTransactionID = parentTransactionID;
			SET outRef.TransactionInfo.Channel = COALESCE(transInfoReq.serviceHeader.channel, transInfoEnv.serviceHeader.channel);
			SET outRef.TransactionInfo.TransactionType = COALESCE(transInfoReq.transactionInfo.transactionType, transInfoEnv.transactionInfo.transactionType);
			SET outRef.TransactionInfo.TransactionSubtype = COALESCE(transInfoReq.transactionInfo.transactionSubtype, transInfoEnv.transactionInfo.transactionSubtype);
			SET outRef.TransactionInfo.ReferenceID = COALESCE(transInfoReq.transactionInfo.referenceId, transInfoEnv.transactionInfo.referenceId);
			SET outRef.TransactionInfo.ProcessingNature = COALESCE(transInfoReq.serviceHeader.processingType, transInfoEnv.serviceHeader.processingType);
			SET outRef.TransactionInfo.ProcessingMode = COALESCE(transInfoEnv.groupHeader.processingMode, 'SINGLE');
			SET outRef.TransactionInfo.Narration = transInfoEnv.transactionInfo.narration;
			SET outRef.TransactionInfo.TransactionDateTime = COALESCE(transactionDate || ' ' || transactionTime, ' ');
			SET outRef.TransactionInfo.Stan = COALESCE(transInfoReq.transactionInfo.stan, transInfoEnv.transactionInfo.stan);
			SET outRef.TransactionInfo.TransmissionDateTime = characterTimestampToCharacter(COALESCE(transInfoReq.transactionInfo.transmissionDateTime, transInfoEnv.transactionInfo.transmissionDateTime), 'yyyy-MM-dd''T''HH:mm:ss', 'YYYYMMddHHmmss');
			SET outRef.TransactionStatus = transactionStatus;
			SET outRef.SourceIp = envTransactionRef.SourceIp;
			
			SET outRef.TransactionReferenceId = InputLocalEnvironment.HostResponse.transactionRefNo;
			SET outRef.TransactionReferenceIdCR = InputLocalEnvironment.HostResponse.transactionRefNoCR;
			
			IF isEmptyString(sourceSystem) THEN
				SET outRef.SourceSystem = 'IIB';
			ELSE
				DECLARE getSourceSystem CHARACTER 'SET outRef.SourceSystem = ' || sourceSystem;
				EVAL(getSourceSystem);
			END IF;

			SET outRef.DestinationSystem = destinationSystem;

			IF NOT asyncProcessingRequired THEN
				PROPAGATE TO TERMINAL 'out1';
			END IF;

			RETURN asyncProcessingRequired;
		END IF;

		RETURN FALSE;

	END;
END MODULE;


CREATE FUNCTION maskData(OutputRoot REFERENCE, transactionRef REFERENCE, srcSystem CHARACTER, destSystem CHARACTER, msgFormat CHARACTER)
BEGIN
	
	DECLARE result ROW;
--	SET result.config[] = PASSTHRU(GET_MASK_DATA_CONFIG_1
--							VALUES(transactionRef.transactionInfo.transactionType,
--									transactionRef.transactionInfo.transactionSubType,
--									destSystem, srcSystem));
--	
--	DECLARE configRef REFERENCE TO result.config;
--	
--	IF NOT LASTMOVE(configRef) THEN
--		SET result.config[] = PASSTHRU(GET_MASK_DATA_CONFIG_2
--							VALUES(transactionRef.transactionInfo.transactionType,
--									transactionRef.transactionInfo.transactionSubType,
--									srcSystem));
--									
--		MOVE configRef TO result.config;
--	END IF;
	
--	IF NOT LASTMOVE(configRef) THEN
--		SET result.config[] = PASSTHRU(GET_MASK_DATA_CONFIG_3
--							VALUES(transactionRef.transactionInfo.transactionType,
--							transactionRef.transactionInfo.transactionSubType,
--							destSystem));
--		MOVE configRef TO result.config;
--	END IF;

	DECLARE configRef REFERENCE TO result.config;
	IF NOT LASTMOVE(configRef) THEN
		SET result.config[] = PASSTHRU(GET_MASK_DATA_CONFIG_4
							VALUES(transactionRef.transactionInfo.transactionType,
							transactionRef.transactionInfo.transactionSubType,
							destSystem,
							msgFormat));
		MOVE configRef TO result.config;
	END IF;
	
	DECLARE field, maskedField, updateField CHARACTER '';
	
	WHILE LASTMOVE(configRef) DO
	
		SET field = 'SET field = ' || configRef.FIELD_PATH;
		EVAL(field);
		
		IF NOT isEmptyString(field) THEN 
			SET maskedField = COALESCE(maskField(configRef, field), field);
			
	--		CALL logDebugMessage('masked field ' || maskedField);
			SET updateField = 'SET ' || configRef.FIELD_PATH || ' = maskedField';
			EVAL(updateField);
			
		END IF;
		
		MOVE configRef NEXTSIBLING;
		
	END WHILE;
END;


--CREATE FUNCTION maskField(maskingChar CHARACTER, maskingLength INTEGER, maskingStrategy CHARACTER, fieldToBeMasked CHARACTER) RETURNS CHARACTER
--BEGIN
--	IF maskingStrategy = 'END' THEN
--		RETURN COALESCE(SUBSTRING(fieldToBeMasked FROM 1 FOR LENGTH(fieldToBeMasked) - maskingLength), '') || REPLICATE(maskingChar, maskingLength);
--	END IF;
--	
--	RETURN REPLICATE(maskingChar, maskingLength) || COALESCE(SUBSTRING(fieldToBeMasked FROM (maskingLength + 1) FOR LENGTH(fieldToBeMasked)), '');
--END;


CREATE FUNCTION maskField(configRef REFERENCE, field CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE maskedField CHARACTER field;
	IF UPPER(configRef.MASK_STRATEGY) = 'END' THEN
		SET maskedField = SUBSTRING(field FROM 1 FOR (LENGTH(field) - CAST(configRef.MASK_LENGTH AS INTEGER)))
			|| REPLICATE(configRef.MASK_CHAR, CAST(configRef.MASK_LENGTH AS INTEGER));
	END IF;
	
	IF UPPER(configRef.MASK_STRATEGY) IN ('START', 'COMPLETE') THEN
		SET maskedField = REPLICATE(configRef.MASK_CHAR, COALESCE(CAST(configRef.MASK_LENGTH AS INTEGER), LENGTH(field)))
			|| COALESCE(SUBSTRING(field FROM (CAST(configRef.MASK_LENGTH AS INTEGER) + 1) FOR LENGTH(field)), '');
	END IF;
	
	RETURN maskedField;
END;

CREATE DATABASE MODULE LogEventMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inputRef REFERENCE TO Root.XMLNSC.EventLog;
		DECLARE logInfo CHARACTER 'Source_Host: ' || inputRef.UserId || ' Source_IP: ' || inputRef.MachineIp ||
		' Action: ' || inputRef.TransactionType || ' Destination_Host: ' || inputRef.Destination;
		
		CALL logInfoMessage(logInfo);
		
		DECLARE eventlogId INTEGER getNextSequenceValue('EVENT_LOG_SEQ');
		
		INSERT INTO Database.{'EVENT_LOG'} 
			(ID, TRANSACTION_LOG_ID, USER_ID, MACHINE_ID, RECEIVE_DATETIME, ACTION, DESTINATION, ACTIVE_IND, 
			CREATE_DATETIME, CREATED_BY) VALUES (eventlogId, inputRef.TransactionLogId, inputRef.UserId, inputRef.MachineIp,
			CURRENT_TIMESTAMP, inputRef.TransactionType, inputRef.Destination, 1, CURRENT_TIMESTAMP, 'SYSTEM');
		
		
		RETURN TRUE;
	END;
END MODULE;