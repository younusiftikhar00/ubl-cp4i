BROKER SCHEMA com.systemsltd.common.notification

PATH com.systemsltd.common.logging, com.systemsltd.common, com.systemsltd.common.cache;

DECLARE ns NAMESPACE 'http://www.systemsltd.com/common/notification';

DECLARE NotificationQuery CONSTANT CHARACTER
	'SELECT TOP ? * FROM IB_NOTIFICATION_REQUEST AS NR WHERE NR.STATUS = ? AND NR.SCHEDULE_TIME <= CURRENT_TIMESTAMP ORDER BY NR.PRIORITY DESC, NR.TYPE DESC, NR.TO_ADDRESS ASC';


CREATE PROCEDURE ReplaceNotificationParameters(IN notificationRef REFERENCE)
BEGIN
	--DECLARE notificationRef REFERENCE TO OutputRoot.XMLNSC.ns:NotificationRequest;
	DECLARE fieldName CHARACTER;
	
	FOR param AS notificationRef.parameters.Item[] DO 
		IF NOT isEmptyString(param.separator) THEN
			DECLARE startLoc INTEGER 1;
			DECLARE endLoc INTEGER POSITION(param.separator IN param.appliesTo);
			
			WHILE (endLoc > startLoc) DO
				SET	fieldName = SUBSTRING(param.appliesTo FROM startLoc FOR endLoc - 1);
				SET notificationRef.{fieldName} = REPLACE(notificationRef.{fieldName}, '${' || param.Name || '}', param.value);
				
				SET startLoc = endLoc + 1;
				SET endLoc = POSITION(param.separator IN param.appliesTo FROM startLoc); 
			END WHILE;
			
			SET	fieldName = SUBSTRING(param.appliesTo FROM startLoc);
			SET notificationRef.{fieldName} = REPLACE(notificationRef.{fieldName}, '${' || param.name || '}', param.value);
					
		ELSEIF NOT isEmptyString(param.appliesTo) THEN
			SET fieldName = UPPER(param.appliesTo);
			SET notificationRef.{fieldName} = REPLACE(notificationRef.{fieldName}, '${' || param.name || '}', param.value);
		
		ELSE
			SET fieldName = 'Body';
			SET notificationRef.{fieldName} = REPLACE(notificationRef.{fieldName}, param.name, param.value);
		END IF;
	END FOR;
END;


CREATE FILTER MODULE VerifyTemplateModule
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE messageRef REFERENCE TO Root.JSON.Data.sendNotificationRequest;
		
		RETURN (NOT isEmptyString(messageRef.templateName));
	END;
END MODULE;


CREATE FILTER MODULE VerifyTemplateProvidedModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN (NOT isEmptyString(Body.ns:NotificationRequest.TemplateName));
	END;
END MODULE;


CREATE DATABASE MODULE UpdateNotificationStatusModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE messageRef REFERENCE TO Body.ns:NotificationRequest;
		
		UPDATE Database.IB_NOTIFICATION_REQUEST AS NR
		SET STATUS = messageRef.Status, PROCESSED_TIME = CURRENT_TIMESTAMP 
		WHERE NR.ID = messageRef.Id;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE DATABASE MODULE UpdateNotificationStateModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE scheduleDelayMins CHARACTER getConfigProperty('NOTIFICATION_SCHEDULE_DELAY');
		DECLARE scheduleTime TIMESTAMP (CURRENT_TIMESTAMP + CAST(scheduleDelayMins AS INTERVAL MINUTE));
		DECLARE messageRef REFERENCE TO Body.ns:NotificationState;
		CALL logInfoMessage('Recevied Notification State [Id, Status, RetryCount] = ' || serializeState(messageRef));
		
		IF (messageRef.Status = 'FAILED') THEN
			DECLARE maxRetryCount INTEGER CAST(getConfigProperty('NOTIFICATION_RETRY_COUNT') AS INTEGER);
			
			IF (messageRef.RetryCount < maxRetryCount) THEN
				SET messageRef.Status = 'READY';
				SET messageRef.RetryCount = CAST(messageRef.RetryCount AS INTEGER) + 1;
			END IF;
		END IF;
		
		UPDATE Database.IB_NOTIFICATION_REQUEST AS NR
		SET STATUS = messageRef.Status, RETRY_COUNT = messageRef.RetryCount, 
			SCHEDULE_TIME = scheduleTime, PROCESSED_TIME = CURRENT_TIMESTAMP 
		WHERE NR.ID = messageRef.NotificationId;
		
		CALL logInfoMessage('Notification State updated for Id[' || messageRef.NotificationId || '], Status[' || messageRef.Status || ']');
		RETURN TRUE;
	END;
	
	CREATE FUNCTION serializeState(messageRef REFERENCE) RETURNS CHARACTER
	BEGIN
		DECLARE state CHARACTER '[' || CAST(messageRef.NotificationId AS CHARACTER) || ', ' || messageRef.Status 
					|| ', ' || CAST(messageRef.RetryCount AS CHARACTER) || ']';
		
		RETURN state;
	END;
END MODULE;


CREATE COMPUTE MODULE ProcessPendingNotificationRequestModule
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE result ROW;
		DECLARE recordCount INTEGER 0;
		DECLARE batchCount INTEGER CAST(getConfigProperty('NOTIFICATION_BATCH_COUNT') AS INTEGER);
		
		CALL logDebugMessage('Processing Pending Notifications');
		SET result.data[] = PASSTHRU(NotificationQuery VALUES(batchCount, 'READY'));
		
		FOR data AS result.data[] DO
			SET OutputRoot.Properties = InputProperties;
			SET OutputRoot.Properties.CodedCharSetId = 1208;
			CREATE FIELD OutputRoot.XMLNSC.ns:NotificationRequest;
			DECLARE requestRef REFERENCE TO OutputRoot.XMLNSC.ns:NotificationRequest;
			
			SET requestRef.Id = data.ID;
			SET requestRef.Type = data.TYPE;
			
			IF (requestRef.Type = 'EMAIL') THEN
				SET requestRef.(XMLNSC.CDataField)ToAddress = data.TO_ADDRESS;
			ELSE
				SET requestRef.ToAddress = data.TO_ADDRESS;	
			END IF;
			
			SET requestRef.(XMLNSC.CDataField)FromAddress = data.FROM_ADDRESS;
			SET requestRef.TemplateName = data.TEMPLATE_NAME;
			SET requestRef.Subject = data.SUBJECT;
			
			IF (requestRef.Type = 'EMAIL') THEN
				SET requestRef.(XMLNSC.CDataField)Body = data.BODY;
			ELSE
				SET requestRef.Body = data.BODY;
			END IF;
			
			SET requestRef.(XMLNSC.CDataField)CcAddress = data.CC_ADDRESS;
			SET requestRef.(XMLNSC.CDataField)BccAddress = data.BCC_ADDRESS;
			SET requestRef.Importance = data.IMPORTANCE;
			SET requestRef.Priority = data.PRIORITY;
			SET requestRef.Status = 'PROCESSING';
			SET requestRef.RetryCount = data.RETRY_COUNT;
			SET requestRef.AttachmentCount = COALESCE(data.ATTACHMENT_COUNT, 0);
			
			IF (data.HTML_ID IS NOT NULL) THEN
				SET requestRef.HtmlId = data.HTML_ID;
			END IF;
			
			IF (data.PARAMETERS IS NOT NULL) THEN
				CREATE LASTCHILD OF requestRef 
				PARSE(CAST(data.PARAMETERS AS BLOB CCSID 1208) CCSID 1208 OPTIONS FolderBitStream);
			END IF;
			
			CALL logInfoDecoratedMessage('Notification Request For Processing Id: ' || CAST(data.ID AS CHARACTER), OutputRoot);
			PROPAGATE TO TERMINAL 1;
			SET recordCount = recordCount + 1;
		END FOR;
		
		IF (recordCount > 0) THEN
			CALL logInfoMessage('Total Processed Notifications: ' || CAST(recordCount AS CHARACTER));
		END IF;
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE LoadNotificationTemplateModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE messageRef REFERENCE TO OutputRoot.JSON.Data.sendNotificationRequest;
		DECLARE prevSibling CHARACTER 'templateName';
		CALL logInfoMessage('Obtaining NotificationTemplate [Type, TemplateName]=[' || messageRef.type || ', ' || messageRef.templateName || ']');	
		
		DECLARE template ROW
		THE(SELECT NT FROM Database.NOTIFICATION_TEMPLATE AS NT 
			WHERE UPPER(NT.NOTIFICATION_TYPE) = UPPER(messageRef.type) AND 
			UPPER(NT.TEMPLATE_NAME) = UPPER(messageRef.templateName));
		
		IF (NOT isEmptyString(template.SUBJECT)) THEN
			IF (messageRef.subject IS NULL) THEN
				CREATE NEXTSIBLING OF messageRef.{prevSibling} NAME('subject') VALUE(template.SUBJECT);
			ELSE
				SET messageRef.subject = template.SUBJECT;
			END IF;
		END IF;
		
		IF (NOT isEmptyString(template.TEMPLATE_BODY)) THEN
			IF (messageRef.subject IS NOT NULL) THEN
				SET prevSibling = 'subject';
			END IF;
			
			IF (messageRef.body IS NULL) THEN
				CREATE NEXTSIBLING OF messageRef.{prevSibling} NAME('body') VALUE(template.TEMPLATE_BODY);
			ELSE
				SET messageRef.body = template.TEMPLATE_BODY;
			END IF;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE PrepareNotificationStateModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--DECLARE notificationRef REFERENCE TO Environment.Variables.Notification;
		DECLARE exceptionRef REFERENCE TO InputExceptionList.*[1];
		DECLARE propRef REFERENCE TO OutputRoot.Properties;
		SET propRef.CodedCharSetId = 1208;
		
		--SET OutputRoot.XMLNSC.ns:NotificationState.NotificationId = notificationRef.Id;
		--SET messageRef.RetryCount = notificationRef.RetryCount;
		
		IF LASTMOVE(exceptionRef) THEN
			SET Environment.Variables.Transaction.HostResponse.responseCode = '01';
			--SET OutputRoot.JSON.Data.responseHeader.responseCode = '01';
			CALL logExceptionMessage(exceptionRef);
		ELSE 
			--SET OutputRoot.JSON.Data.responseHeader.responseCode = '00';
			SET Environment.Variables.Transaction.HostResponse.responseCode = '00';
		END IF;
		
		--CALL logInfoDecoratedMessage('Prepared Notification State Id[' || messageRef.NotificationId || '], Status[' || messageRef.Status || ']', OutputRoot);
		RETURN TRUE;
	END;
END MODULE;

CREATE PROCEDURE PrepareNotificationMessage(IN inputRef REFERENCE, IN outputRef REFERENCE, IN id INTEGER)
BEGIN
	SET outputRef.Id = id;
	SET outputRef.Type = inputRef.type;
	SET outputRef.ToAddress = inputRef.to;
			
	SET outputRef.FromAddress = getConfigProperty('FROM_ADDRESS');
	SET outputRef.TemplateName = inputRef.templateName;
	SET outputRef.Subject = inputRef.subject;
	SET outputRef.Body = inputRef.body;
			
	SET outputRef.CcAddress = inputRef.cc;
	SET outputRef.BccAddress = inputRef.bcc;
	SET outputRef.Importance = inputRef.importance;
	SET outputRef.Priority = inputRef.priority;
	SET outputRef.Status = 'PROCESSING';
	SET outputRef.RetryCount = inputRef.retryCount;
	SET outputRef.AttachmentCount = COALESCE(inputRef.attachmentCount, 0);
	
	MOVE inputRef TO inputRef.parameters.Item;
	CREATE FIELD outputRef.Parameters;
	DECLARE paramRef REFERENCE TO outputRef;
	MOVE outputRef TO outputRef.Parameters;
	WHILE LASTMOVE(inputRef) DO
		CREATE LASTCHILD OF outputRef AS paramRef NAME 'Parameter';
		SET paramRef.Name = inputRef.name;
		SET paramRef.Value = inputRef.value;
		MOVE inputRef NEXTSIBLING;
	END WHILE;
END;

CREATE PROCEDURE UpdateNotificationStatus(IN status CHARACTER, IN notificationMessageId INTEGER)
BEGIN
	UPDATE Database.NOTIFICATION_MESSAGE AS NS 
				SET STATUS = status, MODIFIED_DATETIME = CURRENT_TIMESTAMP, MODIFIED_BY = 'SYSTEM',
				LOCK_VERSION = NS.LOCK_VERSION + 1
				WHERE NS.ID = notificationMessageId;
END;

CREATE PROCEDURE UpdateNotificationStatusUsingSafId(IN status CHARACTER, IN safId INTEGER)
BEGIN
	UPDATE Database.NOTIFICATION_MESSAGE AS NS 
				SET STATUS = status, MODIFIED_DATETIME = CURRENT_TIMESTAMP, MODIFIED_BY = 'SYSTEM',
				LOCK_VERSION = NS.LOCK_VERSION + 1
				WHERE NS.TRANSACTION_SAF_LOG_ID = safId;
END;