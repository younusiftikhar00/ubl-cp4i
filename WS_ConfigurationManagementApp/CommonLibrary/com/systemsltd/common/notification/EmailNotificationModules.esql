BROKER SCHEMA com.systemsltd.common.notification

PATH com.systemsltd.common.logging, com.systemsltd.common, com.systemsltd.common.cache, com.systemsltd.common.util;

CREATE PROCEDURE ReadAttachments(IN templateName CHARACTER NULLABLE, IN messageRef REFERENCE)
BEGIN
	CREATE LASTCHILD OF messageRef NAME('Attachments');
	DECLARE attachmentRef REFERENCE TO messageRef.attachment;
	DECLARE data ROW;
	DECLARE attachmentCount INTEGER 0;
	
	SET data.Attachment[] = (SELECT NA FROM Database.NOTIFICATION_ATTACHMENT AS NA 
							 	 WHERE (NA.NOTIFICATION_MESSAGE_ID IS NULL AND NA.NAME = templateName) OR 
							 	  NA.NOTIFICATION_MESSAGE_ID = messageRef.id);
	
	FOR attachment AS data.Attachment[] DO
		IF (logDebugEnabled()) THEN
			CALL logDebugMessage('Read Attachment [Id, Name, ContentType]=[' || CAST(attachment.ID AS CHARACTER)
								 || ', ' || attachment.NAME || ', ' || attachment.CONTENT_TYPE || ']');
		END IF;
		
		SET attachmentCount = attachmentCount + 1;
		CREATE LASTCHILD OF messageRef.Attachments AS attachmentRef NAME('Attachment');
		CREATE FIELD attachmentRef.Name VALUE(attachment.NAME);
		CREATE FIELD attachmentRef.ContentType VALUE(attachment.CONTENT_TYPE);
		
		IF (attachment.DATA IS NOT NULL) THEN
			CREATE FIELD attachmentRef.Data VALUE (attachment.DATA);
		END IF;
		
		IF (attachment.DATA_LOCATION IS NOT NULL) THEN
			CREATE FIELD attachmentRef.DataLocation VALUE (attachment.DATA_LOCATION);
		END IF;
	END FOR;
	
	-- Updating AttachmentCount in Message for Processing
	IF (messageRef.attachmentCount IS NULL) THEN
		CREATE NEXTSIBLING OF messageRef.retryCount TYPE NameValue NAME('AttachmentCount') VALUE(attachmentCount);
		
	ELSEIF (messageRef.attachmentCount = 0) THEN
		SET messageRef.AttachmentCount = attachmentCount;
	END IF;
	
	IF (logDebugEnabled()) THEN
		CALL logDebugMessage('Expected Attachment Count: ' || CAST(messageRef.attachmentCount AS CHARACTER));
		CALL logDebugMessage('Read Attachment Count: ' || CAST(attachmentCount AS CHARACTER));
	END IF;
END;


CREATE COMPUTE MODULE PrepareEmailMessageModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		-- Add SMTPServer and SecurityIdentity override if required
		SET OutputLocalEnvironment.Destination.Email.BodyContentType = 'text/html; charset=utf-8';
		SET OutputLocalEnvironment.Destination.Email.MultipartContentType = 'mixed';
		
		-- Creating Email Header
		CALL CopyMessageHeaders();
		CREATE LASTCHILD OF OutputRoot NAME('EmailOutputHeader');
		DECLARE emailHeader REFERENCE TO OutputRoot.EmailOutputHeader;
		DECLARE messageRef REFERENCE TO InputRoot.JSON.Data.sendNotificationRequest;
		DECLARE paramRef REFERENCE TO messageRef.parameters;
		
		IF (messageRef.attachmentCount IS NOT NULL AND messageRef.attachmentCount > 0) THEN
			CALL logInfoMessage('Inside read attachement');
			CALL logInfoDecoratedMessage('MessageRef',InputRoot.JSON.Data.sendNotificationRequest);
			CALL ReadAttachments(messageRef.templateName, messageRef); 
		END IF;
		
		IF isEmptyString(messageRef.body) THEN
			THROW USER EXCEPTION MESSAGE 3002 VALUES ('Email Body is required');
		END IF;
		
		IF LASTMOVE(paramRef) THEN
			CALL ReplaceNotificationParameters(messageRef);
		END IF;
		
		SET messageRef.from = getConfigProperty('FROM_ADDRESS');
		SET emailHeader.To = messageRef.to;
		SET emailHeader.Bcc = messageRef.bcc;
		SET emailHeader.Cc = messageRef.cc;
		SET emailHeader.From = messageRef.from;
		SET emailHeader.Subject = messageRef.subject;
		
		-- Creating Email Body
		SET OutputRoot.BLOB.BLOB = CAST(messageRef.body AS BLOB CCSID 1208);
		SET OutputRoot.Properties.CodedCharSetId = 1208;
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;


CREATE COMPUTE MODULE PrepareMimeMessageModule 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Creating Email Header
		CREATE LASTCHILD OF OutputRoot NAME('EmailOutputHeader');
		DECLARE emailHeader REFERENCE TO OutputRoot.EmailOutputHeader;
		DECLARE messageRef REFERENCE TO InputRoot.JSON.Data.sendNotificationRequest;
		DECLARE paramRef REFERENCE TO messageRef.parameters;
		
		IF (messageRef.attachmentCount IS NOT NULL AND messageRef.attachmentCount > 0) THEN
			CALL ReadAttachments(messageRef.templateName, messageRef); 
		END IF;
		
		IF isEmptyString(messageRef.body) THEN
			THROW USER EXCEPTION MESSAGE 3002 VALUES ('Email Body is required');
		END IF;
		
		IF LASTMOVE(paramRef) THEN
			CALL ReplaceNotificationParameters(messageRef);
		END IF;
		
		SET messageRef.fromAddress = getConfigProperty('FROM_ADDRESS');
		
		SET emailHeader.To = messageRef.to;
		SET emailHeader.Bcc = messageRef.bcc;
		SET emailHeader.Cc = messageRef.cc;
		SET emailHeader.From = messageRef.fromAddress;
		SET emailHeader.Subject = messageRef.subject;
		
		-- Creating Email Body
		--SET OutputRoot.BLOB.BLOB = CAST(messageRef.Body AS BLOB CCSID 1208);
		SET OutputRoot.Properties.CodedCharSetId = 1208;
		SET OutputRoot.Properties.Encoding = InputRoot.Properties.Encoding;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('MIME') TYPE Name NAME('MIME');
		DECLARE mimeRef REFERENCE TO OutputRoot.MIME;
		
		CREATE FIELD mimeRef."Content-Type" TYPE NameValue VALUE 'multipart/related; boundary=mimeBoundary';
	  	CREATE FIELD mimeRef."Content-ID" TYPE NameValue VALUE 'MIME-Document';
		CREATE LASTCHILD OF mimeRef TYPE Name NAME 'Parts';
	  	
	  	-- Creating Email Body Part
	  	CREATE LASTCHILD OF mimeRef.Parts TYPE Name NAME 'Part';
	  	DECLARE partRef REFERENCE TO mimeRef.Parts.Part;
		CREATE FIELD partRef."Content-Type" TYPE NameValue VALUE 'text/html; charset=utf-8';
	  	--CREATE FIELD partRef."Content-Transfer-Encoding" TYPE NameValue VALUE '8bit';
	  	CREATE LASTCHILD OF partRef TYPE Name NAME 'Data';
	  	CREATE LASTCHILD OF partRef.Data DOMAIN('BLOB') PARSE(CAST(messageRef.body AS BLOB CCSID 1208));
		
		-- Create Attachment Parts
		IF (messageRef.attachmentCount IS NOT NULL AND messageRef.attachmentCount > 0) THEN
			FOR attachmentRef AS messageRef.attachment.Item[] DO
				DECLARE filename CHARACTER CASE
				WHEN CONTAINS(attachmentRef.name, '.') THEN attachmentRef.name
				ELSE attachmentRef.name || '.' || SUBSTRING(attachmentRef.ContentType AFTER '/') END;
				
				DECLARE contentType CHARACTER attachmentRef.type || '; name=' || filename;
				DECLARE data BLOB attachmentRef.Data;
				
				CREATE LASTCHILD OF mimeRef.Parts AS partRef TYPE Name NAME 'Part';
		  		CREATE FIELD partRef."Content-Type" TYPE NameValue VALUE contentType;
		  		CREATE FIELD partRef."Content-Transfer-Encoding" TYPE NameValue VALUE 'Base64';
		  		CREATE FIELD partRef."Content-ID" TYPE NameValue VALUE attachmentRef.name;
		  		CREATE FIELD partRef."Content-Disposition" TYPE NameValue VALUE 'attachment; filename=' || filename;
		  		CREATE LASTCHILD OF partRef TYPE Name NAME 'Data';
		  		
		  		IF (data IS NULL AND NOT isEmptyString(attachmentRef.dataLocation)) THEN
		  			CALL logInfoMessage('Reading Email Attachment form Location: ' || attachmentRef.dataLocation);
		  			SET data = readFile(attachmentRef.dataLocation);
		  			SET data = CAST(BASE64ENCODE(data) AS BLOB CCSID 1208);
		  		END IF;
		  		
		  		IF (data IS NULL) THEN
		  			THROW USER EXCEPTION MESSAGE 3002 VALUES ('Attachment Data is required');
		  		END IF;
		  		
		  		CREATE LASTCHILD OF partRef.Data DOMAIN('BLOB') PARSE(data);
				--MOVE attachmentRef NEXTSIBLING;
			END FOR;
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

