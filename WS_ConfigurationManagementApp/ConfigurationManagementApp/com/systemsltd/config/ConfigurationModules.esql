BROKER SCHEMA com.systemsltd.config

PATH com.systemsltd.common, com.systemsltd.common.logging, com.systemsltd.common.cache, 
		com.systemsltd.ubl.common.config, com.systemsltd.common.util;

DECLARE CONFIG_ACTIONS CONSTANT ROW
								ROW(LIST{'LoadConfigProperties', 'LoadSystemRoutingInfo', 'LoadCodeMapping', 'LoadRegionMapping',
								'LoadDataMaskConfig', 'UpdateBatchStatus', 'UpdateBulkStatus'} AS actionList[]);

DECLARE lastModifiedTimeForConfiguration, lastModifiedTimeForRoutingInfo, lastModifiedTimeForCodeMapping,
lastModifiedTimeForRegion SHARED TIMESTAMP;

DECLARE prefixQuery CONSTANT CHARACTER 'SELECT * FROM IIBSVC.CODE_MAPPING CM';

DECLARE dataMaskConfigQuery CONSTANT CHARACTER 'SELECT TRANSACTION_TYPE, TRANSACTION_SUBTYPE, SOURCE_SYSTEM,
												DESTINATION_SYSTEM, MSG_FORMAT, FIELD_PATH, MASK_CHAR,
												MASK_STRATEGY, MASK_LENGTH
												FROM IIBSVC.DATA_MASK_CONFIG';
		
DECLARE regionMappingQueryPrefix CONSTANT CHARACTER
		'SELECT RM.CODE, RM.PREFIX FROM IIBSVC.REGION_MAPPING RM WHERE RM.ACTIVE_IND = 1';
		
DECLARE hostSystemsList CONSTANT ROW ROW(LIST{'CBS', 'OMNI', 'IRIS', 'PRIME', 'CMDS', '', 'FUND_MANAGEMENT',
												'BPS', 'VOUCHER', 'TOPUP', 'NADRA', 'NADRA_BISP', 'CAPS',
												'WCO', 'EBS', 'ALTITUDE', 'CBO', 'OMNI_REMITTANCE'}
												 AS hostList[]);

DECLARE loadConfigPropertiesQueryPrefix CONSTANT CHARACTER
		'SELECT CP.CONFIG_GROUP AS RESULT_GROUP, CP.PARAMETER_KEY AS NAME, CP.PARAMETER_VALUE AS VALUE
		FROM IIBSVC.CONFIGURATION_PARAMETER CP
		WHERE CP.ACTIVE_IND = 1';

DECLARE loadConfigPropertiesQueryPrefix2 CONSTANT CHARACTER
		'union select DISTINCT null as RESULT_GROUP,  TRANSACTION_TYPE AS NAME, IRIS_CHANNEL AS VALUE FROM IIBSVC.CHANNEL_ACCESS_CONTROL WHERE IRIS_CHANNEL IN (''IB'',''IVR'')';

		
DECLARE getSymetricKeyAndAlgo CONSTANT CHARACTER 
		'SELECT CP.PARAMETER_VALUE AS VALUE FROM IIBSVC.CONFIGURATION_PARAMETER CP 
			WHERE CP.PARAMETER_KEY IN (''SYMMETRIC_ALGORITHM'') AND CP.ACTIVE_IND = 1';

DECLARE password, filepath, alias EXTERNAL CHARACTER;

CREATE COMPUTE MODULE ConfigCache
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE action REFERENCE TO CONFIG_ACTIONS.actionList[1];

		WHILE LASTMOVE(action) DO
			SET Environment.Variables.Action = action;
			-- LOG EVENT VALUES(Environment.Variables.Action);
			PROPAGATE TO TERMINAL 'out1';
			MOVE action NEXTSIBLING; 
		END WHILE;
		RETURN TRUE;
	END; 
	
END MODULE;


CREATE DATABASE MODULE LoadConfigProperties

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE AESKeyData ROW; -- ConfigProperties
		DECLARE query, query1 CHARACTER loadConfigPropertiesQueryPrefix;
		DECLARE query2 CHARACTER loadConfigPropertiesQueryPrefix2;
		DECLARE decryptedData BLOB;
		
		IF lastModifiedTimeForConfiguration IS NOT NULL THEN
			SET query = loadConfigPropertiesQueryPrefix || ' AND CP.MODIFIED_DATETIME > ? '|| query2;
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query VALUES(lastModifiedTimeForConfiguration));
		ELSE
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query || ' ' ||query2);
		END IF;
		
		IF EXISTS(Environment.Variables.ConfigProperties.Property[]) AND lastModifiedTimeForConfiguration IS NOT NULL THEN
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query1 || ' ' ||query2);
		END IF;
		
		-- DECLARE propertyRef REFERENCE TO ConfigProperties.Property;
		SET Environment.Variables.secretKey = getSecretKey(password, alias, filepath);
		
		IF Environment.Variables.secretKey IS NOT NULL THEN
			-- CALL insertInConfigCacheBLOB('SECRET_KEY', secretKey);
			-- CALL logInfoMessage('secret Key cached');
			LOG EVENT VALUES('secret Key cached');
		ELSE
			-- CALL logInfoMessage('secret Key not found');
			LOG EVENT VALUES('secret Key not found');
		END IF;

		SET AESKeyData.Property[] = PASSTHRU (getSymetricKeyAndAlgo);

		FOR property AS Environment.Variables.ConfigProperties.Property[] DO
			DECLARE CONTINUE HANDLER FOR SQLSTATE 'S22018'
			BEGIN
				-- CALL logDebugMessage('Invalid Length for base64 string');
				LOG EVENT SEVERITY 2 VALUES('Invalid Length for base64 string');
			END;
			IF CONTAINS(property.NAME, 'PASSWORD') THEN
				
				DECLARE decodedData BLOB BASE64DECODE(property.VALUE); -- bytes

				IF (Environment.Variables.secretKey IS NOT NULL) THEN
					SET decryptedData = decrypt(decodedData, AESKeyData.Property[<].VALUE, Environment.Variables.secretKey, NULL);
					SET property.VALUE = CAST(COALESCE(decryptedData, '')  AS CHARACTER CCSID 819);
				END IF;
			END IF; 

			IF NOT isEmptyString(property.RESULT_GROUP) THEN
				SET property.NAME = property.RESULT_GROUP || '_' || property.NAME;
			END IF;
			
			DELETE FIELD property.RESULT_GROUP;
		END FOR;
		
		DECLARE count INTEGER CARDINALITY(Environment.Variables.ConfigProperties.Property[]);
		-- CALL logInfoMessage('Read Configuration properties: ' || CAST(count AS CHARACTER));
		LOG EVENT VALUES('Read Configuration properties: ' || CAST(count AS CHARACTER));

		IF (logDebugEnabled()) THEN
			FOR property AS Environment.Variables.ConfigProperties.Property[] DO
				-- CALL logDebugMessage('Read Configuration Property [Name, Value]=[' || property.NAME || ', ' || property.VALUE || ']');
				LOG EVENT SEVERITY 2 VALUES('Read Configuration Property [Name, Value]=[' || property.NAME || ', ' || property.VALUE || ']');
			END FOR;
		END IF;

--		IF LASTMOVE(propertyRef) THEN
--			CALL setConfigProperties(ConfigProperties.Property);
--		END IF;
		
		-- CALL logInfoMessage('Configuration properties have been initialized in Cache');
		LOG EVENT VALUES('Configuration properties have been initialized in Cache');
		
		SET lastModifiedTimeForConfiguration = CURRENT_TIMESTAMP;
		RETURN TRUE;
	END;

END MODULE;


CREATE DATABASE MODULE LoadSystemRoutingInformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- TODO: Implement this module
		-- Prepare XML or JSON structure and save seralized version in Cache
		-- Refer to Sefam Brand Configuration management for details 
		RETURN TRUE;
	END;

END MODULE;


CREATE DATABASE MODULE LoadCodeMapping
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE result ROW; -- Map
		DECLARE resultRef, itemRef, listRef REFERENCE TO result;
		DECLARE value, column CHARACTER '';
		DECLARE query, query1 CHARACTER prefixQuery;

		CREATE LASTCHILD OF result AS resultRef DOMAIN('JSON') NAME('mapping');

		IF lastModifiedTimeForCodeMapping IS NOT NULL THEN
			SET query = query || ' WHERE CM.MODIFIED_DATETIME > ?';
			SET resultRef.data[] = PASSTHRU(query VALUES(lastModifiedTimeForCodeMapping));
		ELSE
			SET resultRef.data[] = PASSTHRU(query);
		END IF;
		
		IF EXISTS(resultRef.data[]) AND lastModifiedTimeForCodeMapping IS NOT NULL THEN
			SET resultRef.data[] = PASSTHRU(query1);
		END IF;

		DECLARE mappingRef REFERENCE TO resultRef.data;

		-- CALL logDebugMessage('Received ' || CAST(CARDINALITY(resultRef.data[]) AS CHARACTER) || ' mapping rows for cache initialization');
		LOG EVENT SEVERITY 2 VALUES('Received ' || CAST(CARDINALITY(resultRef.data[]) AS CHARACTER) || ' mapping rows for cache initialization');
		
		IF EXISTS(resultRef.data[]) THEN
			MOVE resultRef TO resultRef.data;

			--Iterate on each row
			WHILE LASTMOVE(resultRef) DO

				MOVE listRef TO hostSystemsList.hostList[1];

				IF resultRef.CODE_TYPE = getResponseCodeType() THEN

					SET value = resultRef.CODE || '|' || resultRef.DESCRIPTION;

					--Iterate on each system column
					WHILE LASTMOVE(listRef) DO
						SET column = listRef || '_CODE';

						IF (resultRef.{column} IS NOT NULL) THEN
							CREATE LASTCHILD OF Environment.Variables.Map AS itemRef TYPE Name NAME 'KeyValue';
							SET itemRef.NAME = listRef || '|' || getResponseCodeType() || '|' || resultRef.{column};
							SET itemRef.VALUE = value;
							
						END IF;

						MOVE listRef NEXTSIBLING;
					END WHILE;
				
				ELSE

					CREATE LASTCHILD OF Environment.Variables.Map AS itemRef TYPE Name NAME 'KeyValue';
					SET itemRef.NAME = resultRef.CODE_TYPE || '_' || resultRef.CODE;
					SET itemRef.VALUE = CAST(ASBITSTREAM(resultRef CCSID 1208) AS CHARACTER CCSID 1208);
				
				END IF;

				MOVE resultRef NEXTSIBLING;
			END WHILE;

			DECLARE count INTEGER CARDINALITY(Environment.Variables.Map.KeyValue[]);
			-- CALL logInfoMessage('Read Code Mappings: ' || CAST(count AS CHARACTER));
			LOG EVENT VALUES('Read Code Mappings: ' || CAST(count AS CHARACTER));

			IF (logDebugEnabled()) THEN
				FOR keyValue AS Environment.Variables.Map.KeyValue[] DO
					-- CALL logDebugMessage('Read Code Mapping [Name, Value]=[' || keyValue.NAME || ', ' || keyValue.VALUE || ']');
					LOG EVENT SEVERITY 2 VALUES('Read Code Mapping [Name, Value]=[' || keyValue.NAME || ', ' || keyValue.VALUE || ']');
				END FOR;
			END IF;

--			IF LASTMOVE(mappingRef) THEN
--				CALL insertAllInCache(getCodeMappingCache(), Map.KeyValue);
--			END IF;
			
			-- CALL logInfoMessage('Code mappings have been initialized in Cache');
			LOG EVENT VALUES('Code mappings have been initialized in Cache');

			SET lastModifiedTimeForCodeMapping = CURRENT_TIMESTAMP;
		END IF;
		RETURN TRUE;
	END;
END MODULE;


CREATE DATABASE MODULE LoadDataMaskConfig
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE result, Map ROW;

		CREATE LASTCHILD OF result DOMAIN('JSON') NAME('config');
		SET result.config.data[] = PASSTHRU(dataMaskConfigQuery);
		DECLARE dataRef REFERENCE TO result.config.data;

		-- CALL logDebugMessage('Received ' || CAST(CARDINALITY(result.config.data[]) AS CHARACTER) || ' data mask config rows for cache initialization');
		LOG EVENT SEVERITY 2 VALUES('Received ' || CAST(CARDINALITY(result.config.data[]) AS CHARACTER) || ' data mask config rows for cache initialization');
		
		IF EXISTS(result.config.data[]) THEN
			DECLARE itemRef REFERENCE TO Map.KeyValue;
			
			WHILE LASTMOVE(dataRef) DO
				CREATE LASTCHILD OF Map AS itemRef TYPE Name NAME 'KeyValue';
				SET itemRef.NAME = dataRef.TRANSACTION_TYPE || '|' || dataRef.TRANSACTION_SUBTYPE || '|' || dataRef.SYSTEM;
				SET itemRef.VALUE = CAST(ASBITSTREAM(dataRef CCSID 1208) AS CHARACTER CCSID 1208);
				
				MOVE dataRef NEXTSIBLING;
			END WHILE;

			DECLARE count INTEGER CARDINALITY(Map.KeyValue[]);
			CALL logInfoMessage('Read data mask configs: ' || CAST(count AS CHARACTER));

			IF (logDebugEnabled()) THEN
				FOR keyValue AS Map.KeyValue[] DO
					-- CALL logDebugMessage('Read data mask configurations [Name, Value]=[' || keyValue.NAME || ', ' || keyValue.VALUE || ']');
					LOG EVENT SEVERITY 2 VALUES('Read data mask configurations [Name, Value]=[' || keyValue.NAME || ', ' || keyValue.VALUE || ']');
				END FOR;
			END IF;

			DECLARE dataToBeCachedRef REFERENCE TO Map.KeyValue;
			IF LASTMOVE(dataToBeCachedRef) THEN
				-- CALL insertAllInCache(getDataMaskConfigCache(), Map.KeyValue);
				CALL logInfoMessage('Data mask configurations have been initialized in Cache');
			END IF;

		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE DATABASE MODULE LoadRegionMapping
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- DECLARE ConfigProperties ROW;
		DECLARE query, query1 CHARACTER regionMappingQueryPrefix;
		
		IF lastModifiedTimeForRegion IS NOT NULL THEN
			SET query = regionMappingQueryPrefix || ' AND RM.MODIFIED_DATETIME > ?';
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query VALUES(lastModifiedTimeForRegion));
		ELSE
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query);
		END IF;
		
		IF EXISTS(Environment.Variables.ConfigProperties.Property[]) AND lastModifiedTimeForRegion IS NOT NULL THEN
			SET Environment.Variables.ConfigProperties.Property[] = PASSTHRU(query1);
		END IF;
		
		FOR property AS Environment.Variables.ConfigProperties.Property[] DO
			IF CONTAINS(UPPER(property.PREFIX), 'CBS') THEN
				SET property.PREFIX = SUBSTRING(property.PREFIX AFTER 'CBS');
			END IF;
		END FOR;
		
		DECLARE propertyRef REFERENCE TO Environment.Variables.ConfigProperties.Property;

		DECLARE count INTEGER CARDINALITY(Environment.Variables.ConfigProperties.Property[]);
		-- CALL logInfoMessage('Read Region Mapping properties: ' || CAST(count AS CHARACTER));
		LOG EVENT VALUES('Read Region Mapping properties: ' || CAST(count AS CHARACTER));
		
		IF (logDebugEnabled()) THEN
			FOR property AS Environment.Variables.ConfigProperties.Property[] DO
				-- CALL logDebugMessage('Region Mapping Property [Name, Value]=[' || property.CODE || ', ' || COALESCE(property.PREFIX, '') || ']');
				LOG EVENT SEVERITY 2 VALUES('Region Mapping Property [Name, Value]=[' || property.CODE || ', ' || COALESCE(property.PREFIX, '') || ']');
			END FOR;
		END IF;
		
--		IF LASTMOVE(propertyRef) THEN
--			CALL setConfigProperties(ConfigProperties.Property);
--		END IF;
		
		-- CALL logInfoMessage('Region Mapping properties have been initialized in Cache');
		LOG EVENT VALUES('Region Mapping properties have been initialized in Cache');
		SET lastModifiedTimeForRegion = CURRENT_TIMESTAMP;
		RETURN TRUE;
	END;

END MODULE;
