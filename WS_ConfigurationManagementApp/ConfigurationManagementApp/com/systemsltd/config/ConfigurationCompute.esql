BROKER SCHEMA com.systemsltd.config


CREATE COMPUTE MODULE ConfigCacheCompute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF EXISTS(Environment.Variables.ConfigProperties.*[]) THEN
			SET OutputLocalEnvironment.MQ.GET.QueueName = 'CONFIG.CACHE';
			PROPAGATE TO TERMINAL 'out1';
			CREATE FIELD OutputRoot.JSON.Data.(JSON.Array)ConfigCache;
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			SET J = CARDINALITY(Environment.Variables.ConfigProperties.*[]);
			WHILE I <= J DO
				SET OutputRoot.JSON.Data.ConfigCache.Item[I] = Environment.Variables.ConfigProperties.*[I];
				SET I = I + 1;
			END WHILE;
			
			SET OutputRoot.JSON.Data.ConfigCache.Item[I].NAME = 'SECRET_KEY';
			SET OutputRoot.JSON.Data.ConfigCache.Item[I].VALUE = Environment.Variables.secretKey;
			
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CONFIG.CACHE';
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE CodeCacheCompute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF EXISTS(Environment.Variables.Map.*[]) THEN
			SET OutputLocalEnvironment.MQ.GET.QueueName = 'CODE.CACHE';
			PROPAGATE TO TERMINAL 'out1';
			CREATE FIELD OutputRoot.JSON.Data.(JSON.Array)CodeMappingCache;
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			SET J = CARDINALITY(Environment.Variables.Map.*[]);
			WHILE I <= J DO
				SET OutputRoot.JSON.Data.CodeMappingCache.Item[I] = Environment.Variables.Map.*[I];
				SET I = I + 1;
			END WHILE;
			
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CODE.CACHE';
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE RegionCacheCompute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF EXISTS(Environment.Variables.ConfigProperties.*[]) THEN
			SET OutputLocalEnvironment.MQ.GET.QueueName = 'REGION.CACHE';
			PROPAGATE TO TERMINAL 'out1';
			CREATE FIELD OutputRoot.JSON.Data.(JSON.Array)ConfigCache;
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			SET J = CARDINALITY(Environment.Variables.ConfigProperties.*[]);
			WHILE I <= J DO
				SET OutputRoot.JSON.Data.ConfigCache.Item[I] = Environment.Variables.ConfigProperties.*[I];
				SET I = I + 1;
			END WHILE;
			
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'REGION.CACHE';
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;